ThinMatrix:
    https://youtu.be/d5ttbNtpgi4?t=148
    constraint system, e.g.:
        constraints.setX(new CenterConstraint()) // centered horizontal
        constraints.setY(new PixelConstraint(20)) // 20 from top
        constraints.setWidth(new RelativeConstraint(20)) // 20% of width
        constraints.setHeight(new AspectConstraint(1)) // 1:1 aspect ratio
        display.add(uiElement, constraints)
    rounded corners
    whole UI is scalable
    transitions (slide and fade out), e.g.:
        new Transition().xDriver(new SlideTransition(0, 100)).alphaDriver(new SlideTransition(0, 1))

    text can word-wrap or scale with container


CSS box model:
    https://twitter.com/b0rk/status/1284132999940968454
  
"Advice for the next dozen Rust GUIs":
  https://raphlinus.github.io/rust/gui/2022/07/15/next-dozen-guis.html
  immediate mode vs retained mode GUI
    https://docs.microsoft.com/en-us/windows/win32/learnwin32/retained-mode-versus-immediate-mode

Xilem: an architecture for UI in Rust:
  https://raphlinus.github.io/rust/gui/2022/05/07/ui-architecture.html
  https://xilem.dev
    "drawing considerable inspiration from SwiftUI"

Game UI database:
  https://www.gameuidatabase.com

Game UIs:
  https://interfaceingame.com

"we can fix it in ui" UI dev community?
  https://wecanfixitinui.com 

For enabling-disabling things when part of a larger article:
  if ("IntersectionObserver" in window) {
      const observer = new IntersectionObserver(entries => {
          entries.forEach(entry => { entry.target.drawer.set_visible(entry.isIntersecting); })
      }, { rootMargin: "300px" })

      all_containers.forEach(container => observer.observe(container));
  } else {
      all_containers.forEach(container => container.drawer.set_visible(true));
  }

Svelte
    https://svelte.dev
    tutorial:
      https://svelte.dev/tutorial/basics
    replacement for react?
    "Svelte is a compiler that knows at build time how things could change in your app, rather than waiting to do the work at run time."
    https://svelte.dev/blog/virtual-dom-is-pure-overhead
    "Tentative conclusion after being burned in performance too many times: Diffing (like in React, but by no means is this unique to React) is a sign that there's something wrong with your framework design."
      https://twitter.com/pcwalton/status/1015694528857047040
    "Since we're a compiler, we can do that by instrumenting assignments behind the scenes:":
      `count += 1;` -> `count += 1; $$invalidate('count', count);`
      https://svelte.dev/blog/svelte-3-rethinking-reactivity
    original hypothesis: https://svelte.dev/blog/frameworks-without-the-framework
    Thoughts on Svelte: https://tyhopp.com/notes/thoughts-on-svelte
      https://news.ycombinator.com/item?id=35324430

Lol: "The Polymer library is in maintenance mode. For new development, we recommend Lit."

Pheonix?
  https://www.phoenixframework.org
  "Phoenix overtakes Svelte’s spot as the most loved web framework."
  Erlang / Elixir thing
  elixir: https://elixir-lang.org

Next.js: react but shifts some work to server?

Sciter:
  https://sciter.com
  like an alternative browser engine designed for apps? https://sciter.com/developers/engine-architecture/

What are "Document fragments" ?

https://fresh.deno.dev:
  "The next-gen web framework."
  there r soo many...
    "no JS is shipped to the client by default."

HTML drag events:
  https://simblob.blogspot.com/2023/02/making-of-draggable-objects.html

Well regarded window manager:
  https://awesomewm.org

C++ imgui:
  https://github.com/ocornut/imgui
  "Dear ImGui: Bloat-free Graphical User interface for C++ with minimal dependencies"
  used by tons of AAA games
  https://github.com/ocornut/imgui/wiki/Software-using-dear-imgui
  not meant to be user facing

Text buffer data structure:
  ropes vs gap-buffer
  https://news.ycombinator.com/item?id=37820532
    "In a modern OS, you can combine the gap and the piece table approaches using the MMU to eliminate most copying in the common cases."

Library code "stats" panel:
  When adding a new plugin/library, give a detailed breakdown of stats and effects (RPG inspired style)
  e.g. stats: lines of code, # of fns, authors, revisions, last updated, 
  e.g. exported symbols, systems added, init fns added, collision pairs subscribed to, events listened to, events published
  basically all effects on the system that can be quantified
  perhaps libraries always have a standard control panel that enables/disables features and the
    effects list is updated in real-time

UI principles resources:
  https://www.refactoringui.com
  https://developer.apple.com/design/human-interface-guidelines

Modern iOS Navigation Patterns:
  https://frankrausch.com/ios-navigation

Vello: Fast rust 2D library:
  https://github.com/linebender/vello
  https://www.youtube.com/watch?v=mmW_RbTyj8c
  Eurler Spiral Stroking:
    break bezier into little chunks for offset curve
  Skia:
    https://en.wikipedia.org/wiki/Skia_Graphics_Engine
    Google's 2d graphics library
  "glyph hinting and caching" issue 204
  built on work "Cuda Raster" by nvidia
    natural webgpu workgroup size is 256 = 16x16
  https://levien.com/vello-demo/

Fast 2d graphics:
  Skia,
  Vello
    https://github.com/linebender/vello
    https://www.youtube.com/watch?v=mmW_RbTyj8c
  https://news.ycombinator.com/item?id=39443465
    Couple things I've seen in this space looking around the past couple weeks...
    Flutter made a different engine called Impeller[0] which is replacing Skia. Which is a bit surprising as an ignorant outsider. I hope that works out.
    Rive (https://rive.app), is a new animation tool that targets multiple platforms including web and their CEO Guido Rosso gave a great interview on School of Motion[1] about how they are building an animation first vector engine. There is a side by side demo at 46:56[2] of Skia, Impeller and Rive.
    0: https://docs.flutter.dev/perf/impeller
    1: https://www.youtube.com/watch?v=U0Jd5-eStu4&t=2514s
    2: https://youtu.be/U0Jd5-eStu4?si=8vv3c2bw3VumLzeu&t=2816
  GTK:
    https://docs.gtk.org/gsk4/
  Impeller:
    https://medium.com/@wartelski/impeller-rendering-engine-is-it-good-enough-for-flutter-ff2677714343
  Rive:
    https://rive.app/renderer

Good browser touch events by redblob:
  https://twitter.com/redblobgames/status/1765409668850123046

MSDF text rendering using webgpu:
  MSDF = multichannel signed distance fields
  https://webgpu.github.io/webgpu-samples/?sample=textRenderingMsdf
  generator: https://msdf-bmfont.donmccurdy.com

Dear ImGui example:
  https://github.com/ocornut/imgui

  ImGui::Text("Hello, world %d", 123);
  if (ImGui::Button("Save"))
      MySaveFunction();
  ImGui::InputText("string", buf, IM_ARRAYSIZE(buf));
  ImGui::SliderFloat("float", &f, 0.0f, 1.0f);

  // Create a window called "My First Tool", with a menu bar.
  ImGui::Begin("My First Tool", &my_tool_active, ImGuiWindowFlags_MenuBar);
  if (ImGui::BeginMenuBar())
  {
      if (ImGui::BeginMenu("File"))
      {
          if (ImGui::MenuItem("Open..", "Ctrl+O")) { /* Do stuff */ }
          if (ImGui::MenuItem("Save", "Ctrl+S"))   { /* Do stuff */ }
          if (ImGui::MenuItem("Close", "Ctrl+W"))  { my_tool_active = false; }
          ImGui::EndMenu();
      }
      ImGui::EndMenuBar();
  }

  // Edit a color stored as 4 floats
  ImGui::ColorEdit4("Color", my_color);

  // Generate samples and plot them
  float samples[100];
  for (int n = 0; n < 100; n++)
      samples[n] = sinf(n * 0.2f + ImGui::GetTime() * 1.5f);
  ImGui::PlotLines("Samples", samples, 100);

  // Display contents in a scrolling region
  ImGui::TextColored(ImVec4(1,1,0,1), "Important Stuff");
  ImGui::BeginChild("Scrolling");
  for (int n = 0; n < 50; n++)
      ImGui::Text("%04d: Some text", n);
  ImGui::EndChild();
  ImGui::End();

Icon set:
  https://phosphoricons.com
    https://github.com/phosphor-icons/homepage#phosphor-icons
     free and open-source, MIT

"• In a perfect world I'd say ditch the DOM and give me a real displaylist-style interface, with a
consistent composite architecture. ~awebneck"
  https://www.paulirish.com/2011/what-feature-would-improve-the-web/