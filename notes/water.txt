Unreal water: https://docs.unrealengine.com/en-US/BuildingWorlds/Water/index.html

"projected grid water"
    https://www.reddit.com/r/GraphicsProgramming/comments/ahx14d/is_water_rendering_using_a_projected_grid_still/
    https://fileadmin.cs.lth.se/graphics/theses/projects/projgrid/
    https://tamats.com/games/bwr/

Tessendorf FFT with Gerstner waves vertex grid displacement
    https://www.keithlantz.net/2011/10/ocean-simulation-part-one-using-the-discrete-fourier-transform/

see grapeshot games
    https://developer.nvidia.com/waveworks

GPU simulated water: http://www-evasion.imag.fr/~Fabrice.Neyret/images/fluids-nuages/waves/Jonathan/articlesCG/OceanWaveSimulationInRealtimeUsingGPU2010.pdf

AC: Black Flag
    https://simonschreibt.de/gat/black-flag-waterplane/

Water on a sphere:
    https://www.youtube.com/watch?v=vTMEdHcKgM4

2D waterlines:
    https://observablehq.com/collection/@oliviafvane/watermarks

Cool 3d sim:
    http://david.li/waves/
    https://github.com/dli/waves
    https://www.youtube.com/watch?v=IrUehq6vJss

stylized water shader:
    https://alexanderameye.github.io/notes/stylized-water/

Atlas water:
    https://www.youtube.com/watch?v=Dqld965-Vv0
    based on Tessendorf's "Simulating Ocean Water"
    Only needs time and parameters,
        clients and servers can simulate seperately
        infinite tiles, seamless transitions
    Downsides:
        Uses FFTs, "FFTs are expensive"
        large FFTs -> sacrafice perf
        small FFTs -> either you see patterns or not enough detail
        didn't like Phillips Spectrum
    Used 4 frequency bands
        These are just 4 tile sizes then combined ?
    Used:
        "duel fetch limited JONSWAP spectra"
            "Joint North Sea Wave Project"
        artistic control:
            wind speed, direction, fetch (?),
            spectrum peaking, directional distribution, override amplitude, low pass filter
    For buoyancy:
        Use discrete displacement samples along hull
        Then use a plane fitting algorithm
        Use plane as target transform, use spring to filter
        https://www.geometrictools.com
            https://www.geometrictools.com/GTE/Mathematics/SymmetricEigensolver3x3.h
    Foam where displacement maps are swished together (wave tops)
        "jacobian of displacements per frequency band"
    Explosions, wakes, don't displace the water
    Very cool protoype explosions:
        https://youtu.be/Dqld965-Vv0?t=2578
    Keeping water out of the boat:
        use distance fields generated from the boat hull, 
        don't render within the distance field
    near land just bring waves down to level

Falconeer uses "gerstner waves", 7 iterations:
  https://youtu.be/5d8tx6K6hkk?t=5621
  UE4 shader graph vid:
    https://www.youtube.com/watch?v=BJSMVvZMQ1w

Cool interactive waterfall:
  https://twitter.com/Cyanilux/status/1190253359703482369

Tons of water links:
  http://vterrain.org/Water/index.html

GPU gems water, gerstner waves:
  https://developer.nvidia.com/gpugems/gpugems/part-i-natural-effects/chapter-1-effective-water-simulation-physical-models

Sea of Thieves (not very useful):
  https://www.youtube.com/watch?v=9nxlmCq4220

Waves in Sprigland, 8/24/22:
  What have we learned:
    It's not easy to get the right parameters for gerstner waves
  What are the open questions:
    Do we need more resolution to our mesh before the waves look good?
      So far, it hasn't been easier with a tighter mesh
  What's the immediate, plausible path:
    Go back to the big mesh, unsubdivided, 
      get 2-3 waves that look passable but probably not great
    continue with other gameplay content
  eventually:
    [ ] higher LOD triangle meshes, tiled, follows camera
      - Falconeer uses ~60k tris
    [ ] sliders for real-time adjustment
    [ ] 

Far Cry 5:
  https://www.youtube.com/watch?v=4oDtGnQNCx4
  VGPRs? "Vector General-Purpose Registers"
  precision lowering cannot be automatic:
    full precision is usually required for:
      texture coordinates for sizes of 512 texels or higher
      normal vectors in cartesian coordinates
      math like:
        subtracting two nearly equal numbers
        dividing to a number close to 0
        iterative math that can accumulate into a large error
    register pressure is a common bottleneck
      low register usage allows shaders to run more threads concurrently,
        in order to counter memory latency.
        occupancy increases at discrete thresholds
        narrowly missing a threshold should be avoided
        optimizing lower occupancy shaders yields higher gains
      main source of pressure: maximum number of simultaneous live registers
        e.g. for material blending:
          memory reads are performed early and cached
          loop unrolling
          large number of intermediary values
    Radeon GPU Analyzer will show you live register analysis


Gerstner tutorial (Unity):
  https://catlikecoding.com/unity/tutorials/flow/waves/

Unreal Gerstner:
  https://80.lv/articles/tutorial-ocean-shader-with-gerstner-waves/

New water TODO:
  [x] Try cel shading the water
  [ ] Bug: ensure wave dir aligns w/ world vec2
  [ ] Bug: fix wave length not matching world units
  [ ] Bug: fix crest speed not working right when length varies
  [ ] White foam; foam pattern
  [ ] Try evaluating gerstner in pixel shader for more detailed normal?
  [ ] Transparency / alpha
  [ ] Underwater shader
  [ ] Wake behind boat
  [ ] Fresnel effect
  [ ] Tweak gerstner definitions
  [ ] Fix PBR-ness of mesh colors + lights + lighting equations
  [ ] flow maps
  [ ] reflection
  [ ] refraction

Sine wave:
  y = A*sin(x*w + p*t)
  https://www.desmos.com/calculator/tjjloylhez

Fourier transforms:
  interactive articles:
    https://www.myfourierepicycles.com
    https://olgaritme.com/posts/drawing-with-the-fourier-series/index.html
    https://www.jezzamon.com/fourier/
  3b1b:
    https://www.youtube.com/watch?v=spUNpyF58BY
    https://www.youtube.com/watch?v=r6sGWTCMz2k
  https://www.youtube.com/watch?v=ds0cmAV-Yek

Determining a waterline on the camera:
  https://twitter.com/_staggart_/status/1411339746828226561

Water Wave Simulation 2023:
  https://slembcke.github.io/WaterWaves