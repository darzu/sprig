Contstruct game engine uses a scripting language:
    https://www.construct.net/en/make-games/games-editor

Vector networks instead of paths:
    https://medium.com/@alexharri/the-engineering-behind-figmas-vector-networks-688568e37110

https://hazel.org
    "Hazel is a live functional programming environment featuring typed holes."
    https://arxiv.org/pdf/1703.08694.pdf

Droplet
    https://droplet-editor.github.io
    Used by Code.org's AppLab and GameLab
    https://github.com/droplet-editor/droplet
    http://pencilcode.net

"Next gen HTML renderer"
    https://ultralig.ht

nodes.io:
    https://nodes.io

https://tylr.fun

TODO:
- [ ] Render num literal
- [ ] Render str literal
- [ ] Render bool literal

Coloration modes:
  Like debug colorings in a renderer (over draw, triangles, etc)
  - GPU vs CPU code,
  - ECS coloring (entities, components, systems),
  - from benchmark / dynamic trace: 
    - lines visited
    - time spent
  - library coloring (math, physics, render, etc), like MakeCode
  perhaps multiple colors: top band, center, bottom band ?

Structured editting Done Right is a big opportunity

"Civet: The Modern Way to Write TypeScript":
  https://civet.dev
  a set of potentially interesting ideas for simplifying ts
  has pipelines

In the language, maybe everything should be pipelines / verticalized?
  e.g. https://github.com/tc39/proposal-pipeline-operator
    https://gist.github.com/tabatkins/1261b108b9e6cdab5ad5df4b8021bcb5
  or tacit / point-free style:
    https://en.wikipedia.org/wiki/Tacit_programming

Dion:
  AST representation stuff: https://dion.systems/blog_0001_hms2020.html

Go lang retro:
  https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html

Static-y stuff:
  pre-compile: macros, type systems, 
  post-compile: linters, static-analysis, code-gen
  adds expressivity: macros, code-gen
  restricts expressivity: type systems, linters, static-analysis, code-gen
  Missing need for some sort of mid-compile or layerd compilation thing?
    We want to add and restrict expressivity
  Custom language?
  Compiler hooks?
    Hmm now i'm imagining a compiler that will load project-specific extensions when compiling.
Then with the right hooks those extensions could do things like "Ah, i see you came across struct with the Component trait, I'm going to file that away in my custom book keeping" and later when typing a system query you could be like "Oh for this, I want to run some sanity checks on before we go farther; ah ha! the user forget "X", halt and present "Y"" or "I know it looks like the code forgot to supply Z, but here I can construct Z for you from my own book keeping". So it cooperates with and interrupts the compiler strategically.
  TODO: gather concrete use cases

  ship:ship.mast:mast.sail:sail.width // ":' as component lookup?
  if ship:pos {
    ship:pos.x = 7;
  }
  ship+:pos // add component?
  ship-:pos // remove component?
  ship=:pos // set component?
  ship/ship.pos  // "/" as component lookup?
  ship::

operators, reclaim these symbols!
  bitwise
    & | ^ << >> ~
  pointer
    *foobar &foobar
  string:
    'alwjdklaw `awldjawl
  other:
    @ $ # 
  maybe:
    % / \ ; ? :
  probably leave as-is:
    ! * - + = <> [] {} . ,

entity relations
  https://ajmmertens.medium.com/building-games-in-ecs-with-entity-relationships-657275ba2c6c
  https://docs.larian.game/Osiris_Overview

"do" https://github.com/tc39/proposal-do-expressions:
  let foo = do {
      return 7 + 8
    }
  
TS proposals to review:
  https://github.com/tc39?q=%22proposal-%22&type=all&language=&sort=

Obviously we want a custom robust relation-y query syntax

Game phases:
  Certain functions are async or immediate depending on the game phase you're in
  E.g. if you're in level init, you get to assume X resources are all loaded already

Get inspiration from Zig:
  https://ziglang.org/learn/samples/

Consider erlang:
  http://jlouisramblings.blogspot.com/2010/12/response-to-erlang-overhyped-or.html

Erlang IO Lists:
   https://prog21.dadgum.com/70.html

Verse language:
  https://github.com/UnrealVerseGuru/VerseProgrammingLanguage?tab=readme-ov-file
  https://www.youtube.com/watch?v=OJv8rFap0Nw
  https://www.youtube.com/watch?v=teTroOAGZjM&t=22494s
  https://simon.peytonjones.org/assets/pdfs/verse-March23.pdf
  https://www.youtube.com/watch?v=5prkKOIilJg

Lang feature ideas:
  return value can be a parameter: this tells you the return type plus that it's the same reference
    scaleMesh<T extends RawMesh>(m: T, by: number): T
    ->
    scaleMesh<T extends RawMesh>(m: T, by: number): m
  return value can also have a narrowed type like TS's assert or is but not just a boolean

Requires/Provides:
  functions(/other constructs?) _requires_ certain type and environment properties,
  functions _provide_ certain type and environment properties
  return type as the only provides is insane
    TS lets you have assertions "asserts e is EntityW<...>" and guards "e is boolean"

TODO: investigate co-routines

TODO: investigate green threads a la microbit


