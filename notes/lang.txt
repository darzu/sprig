Contstruct game engine uses a scripting language:
    https://www.construct.net/en/make-games/games-editor

Vector networks instead of paths:
    https://medium.com/@alexharri/the-engineering-behind-figmas-vector-networks-688568e37110

https://hazel.org
    "Hazel is a live functional programming environment featuring typed holes."
    https://arxiv.org/pdf/1703.08694.pdf

Droplet
    https://droplet-editor.github.io
    Used by Code.org's AppLab and GameLab
    https://github.com/droplet-editor/droplet
    http://pencilcode.net

"Next gen HTML renderer"
    https://ultralig.ht

nodes.io:
    https://nodes.io

https://tylr.fun

TODO:
- [ ] Render num literal
- [ ] Render str literal
- [ ] Render bool literal

Coloration modes:
  Like debug colorings in a renderer (over draw, triangles, etc)
  - GPU vs CPU code,
  - ECS coloring (entities, components, systems),
  - from benchmark / dynamic trace: 
    - lines visited
    - time spent
  - library coloring (math, physics, render, etc), like MakeCode
  perhaps multiple colors: top band, center, bottom band ?

Structured editting Done Right is a big opportunity

"Civet: The Modern Way to Write TypeScript":
  https://civet.dev
  a set of potentially interesting ideas for simplifying ts
  has pipelines

In the language, maybe everything should be pipelines / verticalized?
  e.g. https://github.com/tc39/proposal-pipeline-operator
    https://gist.github.com/tabatkins/1261b108b9e6cdab5ad5df4b8021bcb5
  or tacit / point-free style:
    https://en.wikipedia.org/wiki/Tacit_programming

  maybe "->"
    a + b 
      -> + c 
      -> .toString() 
      -> console.log(*)

Dion:
  AST representation stuff: https://dion.systems/blog_0001_hms2020.html

Go lang retro:
  https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html

Static-y stuff:
  pre-compile: macros, type systems, 
  post-compile: linters, static-analysis, code-gen
  adds expressivity: macros, code-gen
  restricts expressivity: type systems, linters, static-analysis, code-gen
  Missing need for some sort of mid-compile or layerd compilation thing?
    We want to add and restrict expressivity
  Custom language?
  Compiler hooks?
    Hmm now i'm imagining a compiler that will load project-specific extensions when compiling.
Then with the right hooks those extensions could do things like "Ah, i see you came across struct with the Component trait, I'm going to file that away in my custom book keeping" and later when typing a system query you could be like "Oh for this, I want to run some sanity checks on before we go farther; ah ha! the user forget "X", halt and present "Y"" or "I know it looks like the code forgot to supply Z, but here I can construct Z for you from my own book keeping". So it cooperates with and interrupts the compiler strategically.
  TODO: gather concrete use cases

  ship:ship.mast:mast.sail:sail.width // ":' as component lookup?
  if ship:pos {
    ship:pos.x = 7;
  }
  ship+:pos // add component?
  ship-:pos // remove component?
  ship=:pos // set component?
  ship/ship.pos  // "/" as component lookup?
  ship::

operators, reclaim these symbols!
  bitwise
    & | ^ << >> ~
  pointer
    *foobar &foobar
  string:
    'alwjdklaw `awldjawl
  other:
    @ $ # 
  maybe:
    % / \ ; ? :
  probably leave as-is:
    ! * - + = <> [] {} . ,

entity relations
  https://ajmmertens.medium.com/building-games-in-ecs-with-entity-relationships-657275ba2c6c
  https://docs.larian.game/Osiris_Overview

"do" https://github.com/tc39/proposal-do-expressions:
  let foo = do {
      return 7 + 8
    }
  
TS proposals to review:
  https://github.com/tc39?q=%22proposal-%22&type=all&language=&sort=

Obviously we want a custom robust relation-y query syntax

Game phases:
  Certain functions are async or immediate depending on the game phase you're in
  E.g. if you're in level init, you get to assume X resources are all loaded already

Get inspiration from Zig:
  https://ziglang.org/learn/samples/

Consider erlang:
  http://jlouisramblings.blogspot.com/2010/12/response-to-erlang-overhyped-or.html

Erlang IO Lists:
   https://prog21.dadgum.com/70.html

Verse language:
  https://github.com/UnrealVerseGuru/VerseProgrammingLanguage?tab=readme-ov-file
  https://www.youtube.com/watch?v=OJv8rFap0Nw
  https://www.youtube.com/watch?v=teTroOAGZjM&t=22494s
  https://simon.peytonjones.org/assets/pdfs/verse-March23.pdf
  https://www.youtube.com/watch?v=5prkKOIilJg

Lang feature ideas:
  return value can be a parameter: this tells you the return type plus that it's the same reference
    scaleMesh<T extends RawMesh>(m: T, by: number): T
    ->
    scaleMesh<T extends RawMesh>(m: T, by: number): m
  return value can also have a narrowed type like TS's assert or is but not just a boolean

Requires/Provides:
  functions(/other constructs?) _requires_ certain type and environment properties,
  functions _provide_ certain type and environment properties
  return type as the only provides is insane
    TS lets you have assertions "asserts e is EntityW<...>" and guards "e is boolean"

TODO: investigate co-routines

TODO: investigate green threads a la microbit

Support narrowing property check:
  type DrawPlaneOpt = {
    norm: V3.InputT;
    color?: V3.InputT;
  } & (
    | {
        center: V3.InputT;
        halfsize?: number;
      }
    | {
        corner1: V3.InputT;
        corner2: V3.InputT;
      }
  );
  if (opt.center) {
    // center & halfsize r here
  }

Byte sizes everywhere:
   type foo = {
    norm: V3.InputT;
    color: V3.InputT;
  } // has size 24
  type foo = {
    norm: V3.InputT; } 
  | {
    norm: V3.InputT;
    color: V3.InputT;
  } // has size min:12 max:24

  can reason about whether a loop will fit into L1 cache?

Should our language support graph datatypes?
  https://www.hillelwayne.com/post/graph-types/
  reasons not:
    too many representations
    too many types of graphs
    too many algorithms
    too performance sensative

Different variable scope types:
  e.g. normal variables, "let", params, curlys etc
  but also:
    sketching -> key: "outOfRange"
      keys are like variable names and we can know type info and check usage sites
    component and resource definitions
      might be deeply nested, but still clutters one "variable space"

No open types (hopefully)
  always whole-program
  interface w/ "sys calls" which can only use simple data types ?
  also w/ closed types, you can have smallest size runtime type info
    e.g. 1 byte type tag on some union type b/c u know there's <=8 possibilities

shower thoughts:
  Resource usage gets added to impicit environment needs
    Can use res?.foo() which only runs if resource exists.
    Some way to do the same thing but request resource to be inited in the future.
  Variables r all pointers fundamentally.
  But Sketcher style “keys” are different in kind. 
    They’re also not implicit parameters. 
    But they could have scope and other variable-like rules.
    Keys have a type
    We can know by control flow where they might be updated
  What r the static semantics of ur code? Or that u wish u had? Encode that.

Other languages to research:
  https://odin-lang.org
    "Odin is a general-purpose programming language with distinct typing built for high performance, modern systems and data-oriented programming."
    https://odin-lang.org/docs/faq/#what-does-odin-offer-over-other-languages

DSL for authorization "Cedar":
  https://arxiv.org/pdf/2403.04651.pdf

Blockers or big scenarios I need to prototype before making a language:
  state:
    Multiple levels, loading / unloading a game, restoring a game from save
  playback:
    replay state changes w/ rewind & forward like watching a game replay
  multiplayer editor:
    multiple users editting ECS state & code

@regehr: "their weakness in optimizing data and data structures has to be one of the most 
  dissatisfying things about modern compilers":
  https://mastodon.gamedev.place/@regehr@mastodon.social/112095182685690344
  an opportunity for our lang

"Layered" computation?
  runtime code at layer 0
  types at layer 1
  Maybe layers before that (2, 3, ...)
  type operations are just code w/ if and loops instead of "foo extends blah ? {} : never" and "{[k in foo]: bar}"
  run the layers in order,
  step-through debuggable,
  like a more powerful zig comptime ?
  each layer is optimizable, it's "just" code
  each layer can output code or types to level -1
    code at layer x is a term in layer x+1
  is this just lisp?

V8, "logical stack", handling callback garbage stack problem:
  https://v8.dev/blog/fast-async

Components & Objects:
  Find-all Creation
  Find-all Read
  Find-all Modify
  CannonBallObj and CannonBallDef should be the same type-level constructs

Code block asterisk:
  Instead of directives like "prettier-ignore",
  Have a little asterisk appear on top-left of block if there's some modifier