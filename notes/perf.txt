Critique of TSC:
    "Their code makes pretty heavy use of megamorphic object shapes and unnecessary 
    dynamic property accesses (both well-known JavaScript speed bumps)"
        https://esbuild.github.io/faq/#why-is-esbuild-fast
        https://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html
        https://github.com/microsoft/TypeScript/issues/39247

Rant about JS:
    https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f
    
GPU memory access costs:
  https://computergraphics.stackexchange.com/questions/37/what-is-the-cost-of-changing-state
    TODO: read for good GPU perf tips
  most to least expensive state changes:
    render target (~60K/s)
    program (~300K/s)
    ROP
    texture bindings (~1.5M/s)
    vertex format
    UBO bindings
    vertex bindings
    uniform updates (~10M/s)

On latency (via Redblob):
    https://pavelfatin.com/typing-with-pleasure/
    https://www.youtube.com/watch?v=vOvQCPLkPt4
    https://www.inkandswitch.com/slow-software.html

Efficient code is harder to change, from redblob lementing mapgen4:
    https://twitter.com/redblobgames/status/1362852520096198656

Visualizing perf:
    https://dubroy.com/blog/visualizing-packrat-parsing/

Animometer Test
    On Mac M1, WebGPU, soft limit of ~85,000 triangle to stay at 60fps
    http://austin-eng.com/webgpu-samples/samples/animometer
    "renderBundles" is essential
    "dynamicOffsets" has no impact (so far)

For automatic lod'ing:
    Maybe convert to volumetric first, then use marching cubes (or square voxels) to create lower detail versions?