Woodworking interactive tutorial:
    Principle of referencing, distance
    e.g. track saw is so direct
    simulate jitter when going through table saw to show how you must press into the guide
    tolerances and multiplicative effects
    Cutting dovetails
    Joinery principles
    solid wood vs plywood
    structural stress tests
    weight and cost

low-poly inspiration:
    https://store.steampowered.com/app/1203180/Breakwaters/

From games:
    Ghosts of Tsushima:
        Excellent use of photography for quest start/end
        Haiku minigame
        Great foliage and leaves
        You feel like a bad ass
    Spiderman:
        Fluid as hell movement
        Web is such a good movement gimick (which every open world game needs),
            this should probaby be stolen wholesale in more games
    God of War:
        Having a companion that's an important plot point makes a ton of sense
        Pretty, grandiose scale
    Horizon Zero:
        Great archery
        Takedowns are a puzzle
        Beautiful scenery
    Dark souls:
        Combat is slower pace and "simple"
        The game feels fair: it's your fault u died
        Enemy state machines are complex, sometimes they're easy, sometimes tough

Cool features sprigland could have:
  - Export 3D scene. Pause the game, take a snapshot of the whole game's 
    current geometry and export that as a .gltf file u can just load into
    blender.
  - Export to Unity. Export 3D scene to .gltf but also create a unity project
    with all the objects represented logically.
      - If we really wanted to, we could maybe transpile to C#. Yikes.
        We can do a partial transpile and anything we can't just gets dropped as
        a comment blob in C#-esq syntax.
        Could have a snarky comment like:
          {Look, we tried. It's not exactly right... You try writting a TypeScript->C# transpiler. Eh, maybe it's still useful?}

GPU toy tool:
  - has view that shows approx memory layout / usage on GPU
  - "shader templates" for e.g. tex->tex pixel shader like post processing, view embedding, jump flood algorithm, etc
      maybe this is how we do "mesh pool" shader stuff too?
  - prelude and postlude read-only collapsable text snippets w/ usable vars highlighted
  - it'd be nice if it was easy to output intermediate results to some debug texture
      and display that

Unrelated:
  social media check-in app:
    browser extension?
    specify {website, time allowed, interval (daily, weekly, monthly)}
    notifies you if you have check-ins available
    shows you your social page one after another with a timer at the top
    optionally a start button per-site so you know it's fully loaded
    an exception system, but it gets logged and you can see how much excess time you spent
    you get to save links to a reading list

Workshop game:
  You have a garage, 
    (that becomes a detached garage and then gets upgraded in size)
  With tools:
    woodworking,
    welding,
    smelting,
    smithing,
    pottery,
    sewing,
    glass blowing,
    stain glass,
    machining,
  Acquired over time
    Maybe you build your own tools?
  Maybe u sell at the local farmers market?
  Life sim?
    u start in a city,
    move out for more space,
    family?
  
Draw cool rope:
  https://muffinman.io/blog/draw-svg-rope-using-javascript/

For backwards compatibility long term:
  perhaps if a project wants to have backwards compatibility it must:
  1) opt into backwards compatibility, and
  2) provide source code (at least to the service)
  b/c w/ source code access, it's possible to do checks like 
    "wait, does anyone actually count on this broken behavior? 
      if not, we can remove it; 
      if so, we can rewrite or provide a shim for those few;
    "
  The key idea is that whole program analysis is so much more powerful than
    partial program analysis.
  Old code would still work, it just has to be pegged to a specific version
  Just a thought.

Make a game about solving problems using mechanisms like here:
  https://www.youtube.com/@thang010146
  https://www.autodesk.com/products/inventor/overview

Car mechanics explainer:
  show a flat rendering of all the car systems
    all the connections, arranged like a circuit, not caring about space
  show where all the sensors are in the system
    every sensor: https://www.youtube.com/watch?v=dK4mb1yS0dY&t=1057s
  show the view that the engine control unit sees of the world
  show all the voltages, fluid types, etc throughout the system
    different fluid & air systems will list expected pressure and temperature ranges, under different conditions
  different overlays like:
    temperature, mechanical forces, voltages, fluid types, failure likelyhood
    year introduced,
  then show how it all folds up to fit into the physical form
  maybe some systems start as a black box (e.g. transmission, engine block), but you can click to expand into its subsystems

Make a gameplay involving controlling machinery like:
  https://www.youtube.com/watch?v=7_iyiOLpRVA

Tiny magmetic light-only timer for pomodoro
  or vscode touchbar app
  or macos topbar icon

Sprigland codebase itself will eventually be a big teaching tool
  Sprigland can be self hosted
  No dependencies forever,
  push as far down the stack as you can
    (replace browser and compiler)
    crazy: custom silicon
  Document the code really well
  have program-sliced versions that show one aspect
  the promise is: hey look sprigland was built from scratch and you can build anything
    you want yourself too.
  all-in-one promise
  have videos / tutorials that reenact that invention of core components like physics and cytochrome
  
many colored lines wire frame creature:
  like Horizon from Last Horizon,
  creature made of neon-ish wireframe lines
  each a different color,
  starts as mono color, then add more in as a progression mechanic
  
multi-surface navigation: interactive teaching sandbox thing
  full 3d movement in space
  2d movement on a ground plane
  3d movement on a height map
  2d movement on a UV surface
  2d movement w/ polar coordinates on a sphere
  maybe some sort of mech avatar that can launch off into 3d space
  show a grid for whichever space you're in

Physics stewards game idea:
  Each world/region has a steward spirit in charge of keeping the laws of nature running properly.
  Some of them are lazy, corrupt, sad, or otherwise impaired so physics starts getting zany.
  You're sent in to {negotiate with / mediate for / battle against / replace} these spirits.
  and each region has unique challanges b/c of the way the regions laws have degraded.

Game dev peer feedback tool:
  Random idea for a gamedev peer feedback website:
  Akin to Ludum Dare's reciprocal feedback karma system. Upload your demo/dialog/scene/UI snippet, add labels, then explore and provide feedback on others' work and get back as much feedback as you give.

Compositional shaders:
  make a little function from vertex input to fragment output w/ needed globals,
  compose these all together
  e.g. surface + object ID, is easy to write a standalone fn from input to output
  it'll also be nice to be able to reference globals in the way that a system references resources

To help people make their own engine/software:
  provide a big test suite!
  E.g. for their own language, for rendering a scene against a reference ray tracer,

Make a Rounds / Bopl / Duck Game / Spiderheck clone:
  all ur game programming is on the fun stuff: new weapons and effects
  small games that have sold well
  we could customize it to our friends' wants

Companion to "Real-Time Collision Detection" book:
  show's all the colision algorithms with a little test scene
  branches of code are highlighted when taken
  variables are color coded
  shows numbers instead of variable name

Use knots (math) w/ different # crossing as loading symbols
  or maybe knots untangling themselves into other knots or the unknot

Better than JSON:
  Everything is positional
  instead of relabeling keys over and over
  you specify an array or item's type

  {"menu": {
    "header": "SVG Viewer",
    "items": [
        {"id": "Open"},
        {"id": "OpenNew", "label": "Open New"},
        null,
        {"id": "ZoomIn", "label": "Zoom In"},
        {"id": "ZoomOut", "label": "Zoom Out"},
        {"id": "OriginalView", "label": "Original View"},
        null,
        {"id": "Quality"},
        {"id": "Pause"},
        {"id": "Mute"},
        null,
        {"id": "Find", "label": "Find..."},
        {"id": "FindAgain", "label": "Find Again"},
        {"id": "Copy"},
        {"id": "CopyAgain", "label": "Copy Again"},
        {"id": "CopySVG", "label": "Copy SVG"},
        {"id": "ViewSVG", "label": "View SVG"},
        {"id": "ViewSource", "label": "View Source"},
        {"id": "SaveAs", "label": "Save As"},
        null,
        {"id": "Help"},
        {"id": "About", "label": "About Adobe CVG Viewer..."}
    ]
  }}  

  == something like ==>

  type item = {
    id: string,
    label?: string
  }
  type menu = {
      menu: {
        header: string,
        items: item[]
      }
  }
  :menu = [
    SVG Viewer
    [
      Open
      OpenNew,Open New
      ZoomIn,Zoom In
      ZoomOut,Zoom Out
    ]
  ]

Stain glass analytical renderer,
  glass panel segments are triangles,
  those get projected mathematically,
  ray tracing works on triangle segments not texture