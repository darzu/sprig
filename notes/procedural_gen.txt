https://www.redblobgames.com/maps/mapgen4/
https://github.com/redblobgames/mapgen4/
https://github.com/redblobgames/1843-planet-generation
http://experilous.com/1/project/planet-generator/2014-09-28/planet-generator.js
http://bit-player.org/2011/a-slight-discrepancy
http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/
https://www.complexity-explorables.org/explorables/baristas-secret/

voronoi:
    https://en.wikipedia.org/wiki/Voronoi_diagram
    https://www.redblobgames.com/x/1929-voronoi-percolation/

Don't use noise:
    https://www.youtube.com/watch?v=ztemzsxso0U&t=1s

phasor patterns:
  https://www.shadertoy.com/view/WtjfzW

Dungeon gen:
    https://www.boristhebrave.com/2021/04/10/dungeon-generation-in-unexplored/

Graph rewriting:
    https://www.boristhebrave.com/2021/04/02/graph-rewriting/
    https://www.boristhebrave.com/2021/04/02/phantomgrammar-and-ludoscope/

"Wave function collapse":
    https://github.com/mxgmn/WaveFunctionCollapse
    https://assetstore.unity.com/packages/tools/level-design/tessera-procedural-tile-based-generator-155425
    https://www.youtube.com/watch?v=2SuvO4Gi7uY
        explained like Sodoku
        References:
            https://marian42.de/article/wfc/
            http://oskarstalberg.com/game/wave/wave.html
            https://robertheaton.com/2018/12/17/wavefunction-collapse-algorithm/
    https://www.youtube.com/watch?v=0bcZb-SsnrA
        Bad North
    Wave Function Collapse over Voxels
      https://www.youtube.com/watch?v=20KHNA9jTsE
    Dungeon generation techniques:
      https://github.com/AtTheMatinee/dungeon-generation/blob/master/dungeonGenerationAlgorithms.py
        

"Delaunay triangulation of 2D points":
    Used by Redblob
    https://github.com/mapbox/delaunator (JS)

Tectonic plates:
    https://nickmcd.me/2020/12/03/clustered-convection-for-simulating-plate-tectonics/

Sculpting noise:
    https://www.redblobgames.com/articles/noise/2d/#spectrum

Generating mazes:
    https://bwinton.github.io/mazes/

Procedural gen as sculpting:
    https://jobtalle.com/random_procedural_generation.html

Procedural color pallets:
    https://iquilezles.org/www/articles/palettes/palettes.htm

Generative art guy:
    https://inconvergent.net/#about

Triangulated sphere:
    https://twitter.com/OskSta/status/1338825080844021760
    https://www.redblobgames.com/x/1842-delaunay-voronoi-sphere/
    https://www.newcastle.edu.au/__data/assets/pdf_file/0017/22508/13_A-fast-algorithm-for-constructing-Delaunay-triangulations-in-the-plane.pdf

Big height map stuff:
    https://casual-effects.com/research/McGuire2005Heightfield/index.html

Triangle grids (different from Redblob):
    https://www.boristhebrave.com/2021/05/23/triangle-grids/
    If u look at the connectivity of corners on a triangle grid, it's actually a hex grid!
    If u look at the connectivity of corners on a hex grid, it's actually a triangle grid!
    Why use triangles:
        They’re always planar
            as a height map, each vertex can be at a different heights
        They’re simple
            "triangles [are] the best shape for any algorithm that scales with the number of points or edges"
            Simplex Noise uses a triangle grid and is prefered over Perlin Noise; because of better interpolation (?)
        They have nicer geometry
            straight edges (unlike hex)
    Marching cubes (2d) on a triangle grid: https://www.shadertoy.com/view/WtfGDX
    consider making vertices "stepable":
        https://www.boristhebrave.com/2021/05/27/some-triangle-grid-extensions/
        all triangles sharing only a vertex are two steps away
        all triangles sharing an edge are one step away

Trihex grids / kagome lattices:
    https://www.boristhebrave.com/2021/05/27/some-triangle-grid-extensions/


No Man's Sky talk: https://www.youtube.com/watch?v=C9RyEiEzMiU
    "Engines dictate design decisions"
    it's bad for progress if everybody uses someone else's engine
    every new genre was created in a new engine
    Engine veteran, wanted to write something new:
        3D terrain (caves and overhangs)
        procedurally textured
        populated with buildings, forests, creatures
        mountains several km tall
        planets millions of sqr km
        diverse planet shapes
        AI flying between planets
        untestable content
    Y is no longer up (surprisingly difficult)
    Always outside the bounds of float point
    great rant about placing a waypoint mark w/ arbitrary planets:
        https://youtu.be/C9RyEiEzMiU?t=728
    2GB download at launch
        (1.5GB was audio, 200MB UI, 300MB for all planet stuff and textures)
    "proc gen for web dev is cool area"
    noise gen (GPU) -> ploygonisation (CPU) -> Render+Physics+Population (CPU+GPU)
    wanted: surprising, playable, performant
    attempt 1: trilinear filtered low density layered perlin noise field
        like minecraft. minecraft worlds are amazing
        problem: if you don't use blocks, when everything is smooth it looks boring
    attempt 2: high density perlin noise
        post processing with feature selection, contrast, etc
        too repetative, unrealistic
        gradient is too constant, distribution of shape change isn't realistic
    attempt 3: alter noise fields using real world DEM data as trainer
        try to extract shape change data
        in the real world, feautres are exponentially distributed
        turns out, the real world is just too boring
    attempt 4: "uber noise"
        above experimentation took ~3-4 years
        common noise methods:
            perlin,
                basic noise
            simplex, 
            billow, 
                abs(perlin)
            ridged, 
                1-abs(perlin)
            worley,
            analytical derivative based alterations,
                creates realistic erosion
                have features change in relation to different octaves of noise
                knowing the slope at a point helps you distribute features much better (e.g. erosion, rivers)
            domain warping,
                feeding noise into itself
                (looks super cool!)
    "Uber Noise":
        Domain warping, slope erosion, altitude erosion, ridges, 
        plateaus, terraces, rolling hills, non-repeating features,
        analytical derivative,
        as you go between octaves, have different emphasis on different octaves


    when you're generating a single voxel, you cannot query the voxels around you
        in general you can't get that context

Loading large world, Ghost of Tsushima:
    https://www.youtube.com/watch?v=Ur53sJdS8rQ
    initial estimates: ~12mb per tile, 100m tiles, 6,400 tiles
    break down goals:
        3->2.5mb terrain
        24->0mb terrain physics
        12->1mb vegitation
        0.5->0.1mb lighting
        6->3mb pathing
    new tech:
        large scale/robust editting?
        proc-gen tools
        mission tools
        optimized instance overhead?
        more data in shared core
        needed fine grain streaming??
    final disc:
        textures: 18g, mesh: 2.8g, terrain: 5.2g, streamed mesh: 0.9g, movies: 6.8g,
        cutscenes: 2.5g, music: 2.1g, dialog: 2g
        total: 56g
    memory break down: https://youtu.be/Ur53sJdS8rQ?t=450
    
Procedural wall:
  https://www.artstation.com/blogs/marcchevry/YMYR/making-of-minimoys-procedural-wall

Procedural terrain w/ errosion:
  https://github.com/dandrino/terrain-erosion-3-ways
  https://news.ycombinator.com/item?id=29724597

"Procedural Generation For Dummies":
  https://martindevans.me/game-development/2015/12/27/Procedural-Generation-For-Dummies-Lots/

Procedural walking:
  https://old.reddit.com/r/gamedev/comments/fqhp9q/procedural_animation_in_10_steps/
  inverse kinimatics in unity: https://www.youtube.com/watch?v=qqOAzn05fvk

Terrain using SDFs:
  https://prideout.net/blog/distance_fields/#procedural-terrain

To Slueth:
  https://www.reddit.com/r/proceduralgeneration/top/?t=all

Different pseudo-random?
  https://iquilezles.org/articles/sfrand/
  float frand( int *seed )
  {
      union
      {
          float fres;
          unsigned int ires;
      };

      seed[0] *= 16807;
      ires = ((((unsigned int)seed[0])>>9 ) | 0x3f800000);
      return fres - 1.0f;
  }

Survey of noise:
  https://hal.inria.fr/hal-00920177/document

Noise, interactive article:
  https://varun.ca/noise/

Noise colors:
  https://blog.demofox.org/2017/10/25/transmuting-white-noise-to-blue-red-green-purple/

Original perlin noise:
  https://web.archive.org/web/20160530124230/http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
  noise fn: in 1D, just smoothly connect the dots from random points
  perlin noise: just combine noise fns w/ various amplitudes and wavelengths (spaceing between dots)
    each layer is known as an octave
  persistance: the faster your amplitude drops off, the more "persistent" the earlier octaves are

  linear interp:
    function Linear_Interpolate(a, b, x)
      return  a*(1-x) + b*x
    end of function

  cosine interp:
    function Cosine_Interpolate(a, b, x)
      ft = x * 3.1415927
      f = (1 - cos(ft)) * .5
      return  a*(1-f) + b*f
    end of function

  cubic interp:
    function Cubic_Interpolate(v0, v1, v2, v3,x)
      P = (v3 - v2) - (v0 - v1)
      Q = (v0 - v1) - P
      R = v2 - v0
      S = v1
      return Px3 + Qx2 + Rx + S
    end of function

  1D smoothed noise:
    function SmoothNoise_1D(x)
      return Noise(x)/2  +  Noise(x-1)/4  +  Noise(x+1)/4
    end function

  2D smoothed noise:
    function SmoothNoise_2D(x>, y)
      corners = ( Noise(x-1, y-1)+Noise(x+1, y-1)+Noise(x-1, y+1)+Noise(x+1, y+1) ) / 16
      sides   = ( Noise(x-1, y)  +Noise(x+1, y)  +Noise(x, y-1)  +Noise(x, y+1) ) /  8
      center  =  Noise(x, y) / 4
      return corners + sides + center
    end function

  Perlin Noise:
    function InterpolatedNoise_1(float x, float y)
      integer_X    = int(x)
      fractional_X = x - integer_X
      integer_Y    = int(y)
      fractional_Y = y - integer_Y
      v1 = SmoothedNoise1(integer_X,     integer_Y)
      v2 = SmoothedNoise1(integer_X + 1, integer_Y)
      v3 = SmoothedNoise1(integer_X,     integer_Y + 1)
      v4 = SmoothedNoise1(integer_X + 1, integer_Y + 1)
      i1 = Interpolate(v1 , v2 , fractional_X)
      i2 = Interpolate(v3 , v4 , fractional_X)
      return Interpolate(i1 , i2 , fractional_Y)
    end function
    function PerlinNoise_2D(float x, float y)
      total = 0
      p = persistence
      n = Number_Of_Octaves - 1
      loop i from 0 to n
          frequency = 2i
          amplitude = pi
          total = total + InterpolatedNoisei(x * frequency, y * frequency) * amplitude
      end of i loop
      return total
    end function

Sebastian Lague, Procedural Landmass Generation (E02: Noise Map):
  https://www.youtube.com/watch?v=WP-Bm65Q-1Y
  unity perlin: integer values are always .5, inbetween is different numbers. Wierd!

Perlin noise wiki: https://en.wikipedia.org/wiki/Perlin_noise

Book of shader on noise:
  https://thebookofshaders.com/11/
  
Simplex noise:
  "Some sort of public index for Stefan Gustavson":
    https://weber.itn.liu.se/~stegu/
    https://weber.itn.liu.se/~stegu/simplexnoise/
      https://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf

  Open Simplex:
    https://github.com/KdotJPG/OpenSimplex2

  Perlin vs Simplex: https://stackoverflow.com/questions/6439350/simplex-noise-vs-perlin-noise

  Looks like patent only applies to 3D and higher: https://en.wikipedia.org/wiki/Simplex_noise#Legal_status
    but it also expired January 8, 2022 !
    https://patents.google.com/patent/US6867776 "Status Expired - Lifetime"

Worley noise: https://en.wikipedia.org/wiki/Worley_noise
  https://thebookofshaders.com/12/

https://bleuje.github.io, Etienne Jacob:
  wealth of amazing animations!
  easier to scroll: https://necessary-disorder.tumblr.com
  stunning set of tutorials too
    might be a bit Processing specific
  as math art: https://math-art-variations.tumblr.com

Smooth / gradient noise:
  https://www.cs.utexas.edu/~theshark/courses/cs354/lectures/cs354-21.pdf
  1. Create grid of random gradient vectors
  2. Compute points within grid using nearest nodes
  3. Interpolate between node values to form continuous function
  4. Combine smooth noise function with other smooth noise functions at different octaves

perlin worms:
  https://www.youtube.com/watch?v=aQ-bomm3lEc

gradiant vs value noise:
  https://thebookofshaders.com/11/
    interpolate between values (points in space) 
    or gradiants (directions at points in space)
  value noise: https://www.shadertoy.com/view/lsf3WH
  gradiant noise: https://www.shadertoy.com/view/XdXGW8

gen art: https://www.isohedron.io

Surface generation:
  Repulsive surface:
    https://www.cs.cmu.edu/~kmcrane/Projects/RepulsiveSurfaces/index.html
    https://www.youtube.com/watch?v=sJgK0jjd6oE
    https://github.com/icethrush/repulsive-surfaces
  https://twitter.com/keenanisalive
  sphere inside out:
    https://www.youtube.com/watch?v=OI-To1eUtuU
  https://store.steampowered.com/app/1297210/Tandis/

L-systems:
  Good for plants and trees
  https://www.youtube.com/watch?v=feNVBEPXAcE
  https://en.wikipedia.org/wiki/L-system
  G = (V, ω, P),
  alphabet: V 
  init: ω 
  rules: P 
  e.g. 
    V: F,R
    w: FR
    P: F->FRF
  impl:
    1. generating as deep a "sentence" as you can
    2. translate that sentence into geometry
  note also: turtle language
  book: "the algorithmic beauty of plants"
  advanced: add chance, add stochastic grammer (chance on rules)

Procedural 2d trees:
  https://twitter.com/Thalanor/status/896692863274287105
  https://twitter.com/Thalanor/status/902901617279864832

Everything Procedural conference:
  http://everythingprocedural.com
  https://www.youtube.com/playlist?list=PLPdLkAMVHwZ7D50ZHlDtvjvzIaNy-ZW5e

Houdini channel:
  https://www.youtube.com/channel/UCvuT2bzBB0kzne16DBAtmLQ