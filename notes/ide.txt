- Bar at the bottom like MacOS or Cities Skylines
- "Edit" or "Play" button w/ small preview in top left ?
- "Download Backup" with info icon to learn about storage

Collaborative editting:
  CRDTs, OT, or good ol multiplayer net code?
  CRDTs:
    https://josephg.com/blog/crdts-are-the-future/
    https://news.ycombinator.com/item?id=31049883
    https://www.youtube.com/watch?v=x7drE24geUw
    https://josephg.com/blog/crdts-go-brrr/
    https://github.com/josephg/diamond-types/

Multiplayer netcode debugger:
  Have split screen open,
  paused,
  user selects two objects and says "I expected these to be the same"
  "okay, which properties?"
  "color, location"
  "looks like ColorDef is only synced and creation and LocationDef is only modified via this event <>"

entity debugger:
  pause game, enter debugger
  on hover, show which components a given entity has 
    and which systems that qualifies them for
  
Interactive min-example generating:
  start by staticly analyzing, tree shaking / program slicing everything
  run dynamic analysis on the sample scene, cut everything that isn't used
  then run in immediate compile & prune mode,
    user deletes some code, tree shaking happens again, 
    sample is run, if it's good, dynamic prune runs again
  interactive commands:
    see number of call sites for each fn
    inline a fn, then do static and dynamic prunes
  special ECS aware unroller
  maybe:
    once the sample is small enough, u can just highlight lines in VSCode and it'll
      tell you weather it'll compile and how many lines could be cut
    
"Build amazing realâ€‘time collaborative products":
  https://liveblocks.io

UI proposal by Raph Levien:
  https://raphlinus.github.io/rust/gui/2022/05/07/ui-architecture.html
  https://news.ycombinator.com/item?id=31297550
  inspired by SwiftUI
  also look at Elm
    "A central philosophy of Rust is that mutation isn't the problem, 
    it's shared mutable state. If you believe that philosophy (and I do), 
    then restricting yourself to pure functions over clonable state 
    feels like tying one hand behind your back."

Crowdsourced benchmarking:
  For shaders or games, in the sprig.land creations browser,
    you can ask users to submit a benchmark! they'll run the example on their
    hardware some number of iterations or benchmark and report the result
  Easier to see cross-GPU perf of everything

Code overlays:
  like a map overlay,
  have options to highlight different regions of code for different purposes like:
    error handling
    support functions / boiler plate vs. main content
    syscalls
    age
    mutative vs pure

For debugging async or init code:
  color all code by first execution order!
    or by per-frame execution order
  this will clearly show splits across an async boundry

Have a "step frame" notion

MidJourney or similiar integration for references generation?

Don't solve static and dynamic analysis in general, solve it for specific cases:
  "Developers hate annotating their code!" 
    Well, no, they hate spending time on something when they don't know the returns.
  Halting problem etc, of course these aren't solvable in general!
  But devs don't care about the general case, they care about their case.
  Don't have a single push button tool for everybody 
    (well except to the extent we can leverage special sprigland knowledge)
  Have a toolkit that allows devs to create custom code analysis for their exact game.

Maybe instead of "beginner" "advanced" "expert" UI modes,
  there is instead "opinionated" and "custom" mode or something,
  like beginners don't want / shouldn't have too many options,
    be prescriptive, define clear boundries, constraints really help,
  once they're orientated and ready to push boundries then allow getting outside
    the opinionated rails.
  But it's not "beginner" b/c big complex games can be made with that initial set
    of opinionated choices.

Might be good to be very opinionated and support my one workflow style
  Each additional alternate workflow imposes a maintance burden
  We'd have to think about each feature and which workflows it breaks
  very hard to think about when you need to page-in a non-familiar workflow
  and very time consuming to put out a call to community to comment on workflow breakage

My twitter thread re: editor undo + subject undo:
  https://twitter.com/sprigland/status/1638636277334675456

For every added component, system, resource, library, big chunk of code:
  "What does this provide for me?"
  "What will this cost?"
  perf cost, code size, init cost, api surface area size,
  e.g. add "BulletProjectile" component
    What will this do for me?
      Runs three new systems that do X, Y, and Z respectfully
    How many do you expect to have? 1, 10, 100, 1000, 10000
      Here's how that's expected to impact performance,
      Here's where in the critical path that computation will sit
  Motivation:
    Say we add "Multiplayer Sync" component to some object
      What will that entail? What new things will that bring in?
      Special assumptions the author wants you to know?
      How can this be inlined?
  Should always be able to "inline one layer"
    So you can see the first layer of code that is added by something and make tweaks yourself
  It's both very useful to have a minimal annotation burden, 
    and also very frusterating if that ends up pulling in a ton of "magic" code that is hard to inspect
  Yet again program slicing will be very useful here.

"Find all references" enhancements
  Producers vs consumers of a symbol
  trace a symbol back through git commits and renames
  when a symbol rename happens, remember that for later history

Sprig lang's error handling:
  https://joeduffyblog.com/2016/02/07/the-error-model/