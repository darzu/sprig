Contstruct game engine uses a scripting language:
    https://www.construct.net/en/make-games/games-editor

Vector networks instead of paths:
    https://medium.com/@alexharri/the-engineering-behind-figmas-vector-networks-688568e37110

https://hazel.org
    "Hazel is a live functional programming environment featuring typed holes."
    https://arxiv.org/pdf/1703.08694.pdf

Droplet
    https://droplet-editor.github.io
    Used by Code.org's AppLab and GameLab
    https://github.com/droplet-editor/droplet
    http://pencilcode.net

"Next gen HTML renderer"
    https://ultralig.ht

nodes.io:
    https://nodes.io

https://tylr.fun

TODO:
- [ ] Render num literal
- [ ] Render str literal
- [ ] Render bool literal

Coloration modes:
  Like debug colorings in a renderer (over draw, triangles, etc)
  - GPU vs CPU code,
  - ECS coloring (entities, components, systems),
  - from benchmark / dynamic trace: 
    - lines visited
    - time spent
  - library coloring (math, physics, render, etc), like MakeCode
  perhaps multiple colors: top band, center, bottom band ?

Structured editting Done Right is a big opportunity

"Civet: The Modern Way to Write TypeScript":
  https://civet.dev
  a set of potentially interesting ideas for simplifying ts

In the language, maybe everything should be pipelines / verticalized?
  e.g. https://github.com/tc39/proposal-pipeline-operator
    https://gist.github.com/tabatkins/1261b108b9e6cdab5ad5df4b8021bcb5
  or tacit / point-free style:
    https://en.wikipedia.org/wiki/Tacit_programming


