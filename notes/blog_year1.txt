Goals / vision:
  <1mb games
  Instant games a la Flash era
  The easiest way to make 3d multiplayer games
  Gameplay-driven development
  Visual / structured programming
    Better than Blockly
    Strongly typed
    So many engine-specific language features, static & dynamic analysis, tools
  Runs on any device
  Not a walled garden: roblox, dreams, little big planet, MakeCode, Scratch,
  Lowest possible barriers: all web, any hardware
  No royalties, all open source MIT
  No package manager, all ES6 modules
  The easiest way to learn programming
  Great at creating no-dependency examples via program slicing
  Yes glitch.com
  One-handed gaming (seriously!)
  As simple as possible but no simpler! None of this "no code" nonsense
    Also, yes user will have to care about performance and resource constraints!
  Can make "real games"
    Games with hours of content that people want to play and pay money for
  Coding on a controller a la Kodu and Dreams
  Code on a phone
  Code with just a mouse

  More out there:
    A better way to think about complexity in software
    Humans solving complex problems

Pitches / one-liners:
  Unity but on the web
  Glitch.com but for games
  MakeCode but 3D
  Roblox but open source
  Dreams but not locked to PS4/5
  
Bets:
  Coop/good-faith only: you don't care about cheating
  Gameplay is king, good (esp high realism) visuals aren't as important
    Look at Minecraft, Roblox
  A lot of these goals synergize with each other
  A lot of people are saying "no code" or "low code", 
    and I'm saying the opposite: "yes code! code first"

Non-goals:
  hyper-realistic PBR-ish rendering

Maybes:
  VR

Features in 1st year:
  Multiplayer
    Peer to peer, webrtc, peerjs-derived
    Prediction
    always-sync components
    once-sync components
    event log
  3D mesh render
  Mesh importing, .obj files
  Physics
    Collision detection
    non-intersection
  ECS
    Components
      Resources
    Entities
      ID spaces
    Systems
      One-Shot Systems
    TypeScript + wizards

  Unused:
    Infinite grass land shader
    Displacement map ocean water

FAQ:
  Why not {Unity, Unreal, GameMaker, Godot, }
  Why not {MakeCode, Scratch, }
  Why not {PlayCanvas, Babylon, threejs, }
  Why 3D
    less well solved than 2D
  Why multiplayer/coop
  Why web
  Why still release on steam
  Why not {Itch, }
  Why MIT, why not {GPL, closed-source, }
  Why not {Rapier, Bullet, }
  Why not {Rust, C#, C++, WASM, Haxe, Go, GodotScript, }
  Why not {Ads, pay-for-sprigland, }
  Why not {Blockly, }
  Why not {Peerjs, }
  Why not more community JS libraries?
  Why so much of your own stuff?
  Why not academia?

Comparison chart w/
  PlayCanvas, Babylon, Threejs, Construct, Phaser
  Unity, Unreal, GameMaker, Godot, XNA/MonoGame
  MakeCode, Scratch, TouchDevelop, HopScotch
  HypeHype, Roblox,
  Little Big Planet, Dreams, Kodu, ProjectSpark
  Glitch.com
  Pico8
  Google Game Builder
    https://www.blog.google/technology/area-120/create-3d-games-friends-no-experience-required/
    rip

Game engines on steam data:
  https://www.gamedeveloper.com/business/game-engines-on-steam-the-definitive-breakdown
  https://gamefromscratch.com/top-game-engines-on-steam/

---
Outline 1:
  What is Sprigland's goal?
  What is Sprigland today?
  Where is Sprigland going next?
  
Outline 2:
  blow by blow, what happened this year  

---
While at MakeCode, I became convinced of two surprising beliefs:
  - structured / block programming can be just as powerful if 
      not more so than traditional text
  - structured editting can be near 1:1 to text