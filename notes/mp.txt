
WebRTC:
    https://webrtc.org
    https://webrtcforthecurious.com
    https://webrtc.github.io/samples/
    https://www.html5rocks.com/en/tutorials/webrtc/basics/
    https://www.reddit.com/r/WebRTC/comments/ci5h60/request_for_nodewebrtc_server_based_multiplayer/
    WebRTC Data Channel
    https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols
    https://sudonull.com/post/113009-MMO-on-WebRTC
    https://0fps.net
    https://github.com/floatdrop/mmo.jit.su/blob/master/server/app.js
    https://github.com/floatdrop/Aux
    https://github.com/mozilla/BrowserQuest
    https://hacks.mozilla.org/2013/03/webrtc-data-channels-for-great-multiplayer/
    https://github.com/kripken/BananaBread/

Replacing webrtc?
  https://news.ycombinator.com/item?id=38069974
  https://news.ycombinator.com/item?id=38069974

peerjs: (webrtc)
https://peerjs.com
    https://github.com/peers/peerjs
    https://github.com/peers/peerjs-server

websockets:
(web sockets use TCP and guarantee delivery and ordering. not UDP.)
https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
https://www.emergencevector.com/blog/2016/11/23/have-websockets-want-udp-the-solution

e.g.
    https://www.titansoftime.com
    https://github.com/alongubkin/xylose
    http://moomoo.io/
    https://github.com/Anuken/Mindustry

Reference: Photon (Unity)
    https://assetstore.unity.com/packages/tools/network/photon-unity-networking-classic-free-1786
    https://assetstore.unity.com/packages/tools/network/pun-2-free-119922

Architecture:
    player-hosted
    (can pay for server to host)
    connectivity test ea player matching

GameDev basics:
    https://www.reddit.com/r/gamedev/wiki/faq#wiki_getting_started

Resources:
    https://github.com/feather-rs/feather (rust minecraft server)
    https://github.com/cuberite/cuberite (c++ minecraft server)

Physics engines:
    Determinism matters for networked lockstep
    https://rapier.rs (optional determinism)

Approach:
    Go through Photon's or other's getting-started to see what burden they put on users,
    should be enlightening

From GameDev reddit on Networking:
    Although online games are fun to play, be aware that networking will suck your time and that it doesn't only involve sending a message back and forth. Lag compensation, dead-reckoning, bad connections, bad computers, proper physics and preventing cheating are all things to care about for a real-time game. Turn-based multiplayer games are way easier to design.
    Gabriel Gambetta : Client-Server Game Architecture Great first read, but part IV shouldn't be implemented in your first game.
        http://www.gabrielgambetta.com/client-server-game-architecture.html
    Gafferon Games : What every programmer needs to know about game networking
        http://gafferongames.com/networking-for-game-programmers/what-every-programmer-needs-to-know-about-game-networking/
    Gafferon Games : Networked Physics
        http://gafferongames.com/game-physics/networked-physics/
    Gafferon Games : Fix your timestep! How-to have a "deterministic" physics
        http://gafferongames.com/game-physics/fix-your-timestep/
    Gafferon Games : UDP vs. TCP
        http://gafferongames.com/networking-for-game-programmers/udp-vs-tcp/
    Gafferon Games : Sending and Receiving Packets
        http://gafferongames.com/networking-for-game-programmers/sending-and-receiving-packets/
    Gafferon Games : Reliability and Flow Control
        http://gafferongames.com/networking-for-game-programmers/reliability-and-flow-control/
    The Poor Man's Netcode
        https://www.gamedev.net/articles/programming/networking-and-multiplayer/the-poor-mans-netcode-r4851/
    Fabien Sanglard : Quake Engine code review He talks about client-side prediction, really interesting since it's probably the first game involving code about hiding latency
        http://fabiensanglard.net/quakeSource/index.php
    The Quake3 Networking Model Read it at least for the brute-force model :)
        http://trac.bookofhook.com/bookofhook/trac.cgi/wiki/Quake3Networking
    Source Multiplayer Networking Must-read of course, a bit more complex than q1 or q3. Note that you definitely don't need a server-side history of inputs for a first game.
        https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking
    Valve Latency Compensation
        https://developer.valvesoftware.com/wiki/Latency_Compensating_Methods_in_Client/Server_In-game_Protocol_Design_and_Optimization
    Unreal Networking Architecture
        https://api.unrealengine.com/udk/Three/NetworkingOverview.html
    GDC : I Shot You First Great talk about AAA networking, but quite a few suggestions apply to indies as well.
        https://www.gdcvault.com/play/1014345/I-Shot-You-First-Networking
    GDC : Overwatch Gameplay Architecture and Netcode
        https://youtu.be/W3aieHjyNvw?t=1342

Following:
    https://gafferongames.com/categories/networked-physics/
    https://gafferongames.com/post/introduction_to_networked_physics/
    https://gafferongames.com/post/deterministic_lockstep/
    https://gafferongames.com/post/snapshot_interpolation/
    https://gafferongames.com/post/snapshot_compression/
        https://gist.github.com/gafferongames/bb7e593ba1b05da35ab6

Techniques:
    Deterministic lockstep:
        Con: need to wait for input from all players to run simulation, best for 2-4 players
        Con: deterministic physics is hard
        Pro: very compact bandwidth
        Good for RTS and turn-based
    Snapshots + interpolation + delta compression
        Hermite Interpolation is much better for rotations
        Con: more bandwidth
        ~10pps gives very good results
        interpolation buffer should have enough delay so you can lose two packets in a row
            ~10pps goes to ~350ms delay
            ~30pps goes to ~150ms delay
            ~60pps goes to ~85ms delay
    State synchronization
        send state and input
        pro: doesn't require deterministic physics
        con: extrapolation divergence happens, leads to bugs and "pops"
        optimizations:
            use "has changed" bits
            other bit packing applies
            "serialization function": https://gafferongames.com/post/serialization_strategies/
            send multiple redundent inputs (like det-lockstep)
            use a prioritization scheme to select ~64 most important updates
                use "priority accumulator" to focus on most important (player, interacting) but eventually service all objects.
            bandwidth limit: use prioritization scheme to set dynamic bandwidth limits
            use jitter buffer
            quantize both sides
        Reduce popping:
            Don't render at simulation location, instead render at sim location lerp'ed w/ error
            Use different smoothing amounts: 
                0.95 for small jitter (<25cm), 0.85 (>1m), lerp between
        Delta compression
            Store positions as relative to player
            per-object ack's and diffing
            bidirectional acks are complicated:
                https://gafferongames.com/post/reliability_ordering_and_congestion_avoidance_over_udp/
            bump priority of objs at rest that haven't been ack'ed
        
Learnings:
    You can often trade latency for smoothness
    To lower latency, you can use extrapolation, which can be hard
    Position is often the hardest to compress well
    RTT: round trip time

bandwidth optimizations:
    any numerical:
        bound and quantize
        use known relations (e.g. "smallest three")
    smallest three (for quantenion):
        send only three members
        w = sqrt( 1 - x^2 - y^2 - z^2 )
        (x,y,z,w) = (-x,-y,-z,-w) # no sign bit required
        TODO: another optimization something with (v,v,0,0)
        possible to turn 128bits into 29bits
    compress velocity:
        bound and quantize
            e.g. Set max speed bounds and stepping (e.g. max: 32 m/s, step: 1 m/s)
            e.g. [0,2047]
        track "at rest" bit
        depending on transfer frequency, might be best to switch back to lerp
    compress position:
        bound and quantize
            e.g. [-131072,+131071] // x,y
            e.g. [0,16383] // z
        e.g. 50 bits per absolute position
    delta compression:
        simplest: 1 bit per obj that hasn't changed
        reciever sends "ack"
        sender sends delta relative to last ack'ed
    small wins:
        send only changed objs with a obj index and assume others are unchanged
            for 10 bit indices, indices are more efficient for <=90 cubes
            calculate per snapshot which encoding to use
        send indices as relative offsets from previous indices
            e.g.:
                [1,8] => 1 + 3 (4 bits)
                [9,40] => 1 + 1 + 5 (7 bits)
                [41,900] => 1 + 1 + 10 (12 bits)
                => avg 5.5 bits (instead of 10) per index
            note this makes swapping encodings between index objs vs all objs more complicated
        encode position relative to snapshot
            collected runtime data
            used a script to determine most efficient encoding of the sample data
                e.g. result: delta [-16,+15], delta [-256,+255], absolute
                    => 26.1 bits per position
        Delta Encoding Smallest Three
            tried and failed:
                4D delta components + smallest three like above
                delta whole orientation (only 90% better)
            per 3 components:[-16,+15] small, [-128,+127] large
                => 23.3 bits per relative quantenion
        One change bit for position, one for orientation
            e.g. 5% changed didn't rotate, 5% changed didn't move
                => save 2 bits per cube
        Estimate angular velocity using previous orientations to predict new orientations
    context aware arithmetic encoding:
        https://github.com/rygorous/gaffer_net/blob/master/main.cpp
        25% better than bit packing
        somewhere here: https://fgiesen.wordpress.com/category/compression/
        http://www.radgametools.com/oodle.htm
            licensing: sales3@radgametools.com
        https://twitter.com/gafferongames/status/576954706334887936
        


Ideas:
    build a shitty network simulator into the IDE


NEXT: 
    https://gafferongames.com/post/networked_physics_in_virtual_reality/
    https://gafferongames.com/categories/building-a-game-network-protocol/
    search: minecraft network model
    search: valheim network model
    search: dark souls network model

WebRTC problems (and solutions?):
    https://gafferongames.com/post/why_cant_i_send_udp_packets_from_a_browser/
        https://github.com/networkprotocol/netcode
        https://github.com/RedpointGames/netcode.io-browser
        https://news.ycombinator.com/item?id=13264952
        rust server? https://github.com/kyren/webrtc-unreliable
        "BoringSSL and usrsctplib"
        librtcdcpp ?

Oculus physics sample:
    https://gafferongames.com/post/networked_physics_in_virtual_reality/
    https://github.com/fbsamples/oculus-networked-physics-sample
    Options:
        Deterministic lockstep
            subtype: "rollback networking" or GGPO
                Used by basically all fighting games
                Great for simple physics where ~25x physics steps per frame isn't hard
        Client/server with client-side prediction
        Distributed simulation with authority scheme (*chosen*)
            Players take authority over objs they interact with
    authority schemes:
        What if two players interact with the same set of objs?
        What if two players try to take authority at once (masked by latency)?
        Intuition: since state is exchanged rapidly (~60hz), handle in protocol encoding
        Authority: last touched wins, transitive (thrown cube claims authority over those it hits)
        Ownership: once taken, player keeps it until relinquished
    lossy bandwidth optimizations made PhysX behave badly
        need to set maxDepenetrationVelocity
        need custom 'at rest' detection
    priority accumulator:
        negative and positive values (neg clears accum)
        boost priority for objs likely involved in divergence
    per-cube snapshoting and delta compression
        need reliability ack's
        lots of code complexity
    included a fancy ballistics predictor
        cubes that follow the prediction get another bit: "perfect prediction"
    regret: using smallest-three
    recommend: use a arithmetic compressor
    (months of work to this point)
    ! all the above looked awful for avatars
        because of timestep issues (FixedUpdate vs Update)
        100ms jitter buffer
        include held cubes as part of avatar instead of physics sim (neg priority)
    one player is the "host"
        all packets flow through, they are the arbiter
        host can override ownership & authority
        at rest cubes go back to host (I think?)
        
Unity multiplayer:
    "MLAPI"
    "Transport"
        What does "jobified client and server" mean?
        options: UnetTransport, ???
    Boss Room example
    https://docs-multiplayer.unity3d.com/blog
    User burden:
        Create a singleton "NetworkManager"
        Switch on "client" vs "server" vs "host"
        Create component which inherits from "NetworkBehaviour"
        Create properties with type NetworkVariableVector3
            Write perms: ServerOnly
            Read perms: Everyone
        Annotate methods with "[ServerRpc]", e.g.:
            [ServerRpc]
            void SubmitPositionRequestServerRpc(ServerRpcParams rpcParams = default)
            {
                Position.Value = GetRandomPositionOnPlane();
            }
        clients can request a server runs some code, these keeps everything in the client perspective when coding
        manually need to keep local rigidbody transform in sync:
             void Update()
            {
                transform.position = Position.Value;
            }
        there's a singleton "PlayerObject" on the client?
            if (NetworkManager.Singleton.ConnectedClients.TryGetValue(NetworkManager.Singleton.LocalClientId, out var networkedClient))
            {
                var player = networkedClient.PlayerObject.GetComponent<HelloWorldPlayer>();
                if (player)
                {
                    player.Move();
                }
            }
        "NetworkTransform" is a component synchronized between client and server
        Also [ClientRpc] exists

    MLAPI:
        NetworkObjects
            has NetworkId
            NetworkTransform, NetworkBehavior, and NetworkVariable need to be childed under one
            has owner
            SoftSync vs PrefabSync
                PrefabSync is "ONLY recommended for multi project setups"
        NetworkBehavior
        PlayerObject is a simplification for when there's just one
        Spawning is something the user has to care about
        data structures: NetworkVariable, NetworkList and NetworkDictionary
            for keeping state in sync
        Host/server can control custom "visibility" criteria for clients
        programmer concerns:
            scene switching
            obj network visiblity per client
            spawning/despawning
            object pooling
    https://unity.com/products/netcode

RTS networking: https://www.gamasutra.com/view/feature/3094/1500_archers_on_a_288_network_.php

Unreal networking: https://docs.unrealengine.com/udk/Three/NetworkingOverview.html

https://yal.cc/preparing-your-game-for-deterministic-netcode/
    https://news.ycombinator.com/item?id=27253890

Unity DOTS:
    https://unity.com/dots

netplayjs:
    https://github.com/rameshvarun/netplayjs

Rocket League networking:
    https://youtu.be/ueEmiDM94IE?t=1354
    input delay is not an option
        need client prediction for rigid bodies
    server can't wait for client input
        results in non determinism between player and server
    collisions with moving objects
    100% server authority
    lag compensation in FPS:
        client send a packet saying, hey I shot that player at this time, 
            server looks back in time and confirms the kill

Overwatch netcode:
    https://www.youtube.com/watch?v=
    Great talk about how to do ECS at scale

    ECS is for integrating a bunch of systems together, 
        it shouldn't force its design principles where it isn't welcome
        ECS is glue
            Enforces constraints on your glue code
        ECS minimizes coupling
        Netcode is tricky so decouple it
        Only a handful of people will touch your physics or your audio, 
            but everyone is going to touch the glue that holds everything together

    Many systems (and the components they operate on) are often ice-berg shaped. 
        They have a small surface area that systems can touch, 
        with a large amount of complexity under the water.

    Post mortem:
        Deferring creation was a mistake, but it's a difficult problem

    Systems strictly define the tuple of components they depend on at compile time
        This allows multi-threading b/c you can have a clear D-DAG

    ECS rules:
        Components have no functions
        Systems have no state
            This requirement was necessary for kill cam
            Embraced singleton components
        Shared code in utils
        Complex side-effects should be deferred
            by enqueuing them in components, preferably singleton components
        Systems can't call other systems

    Quantized to 1m/1024

    `if you take away one lesson from this talk let it be this - 
    behaviors are much less complex if they are expressed in a 
    single callsite, in which all major behavioral sideeffects 
    are localized to that callsite`

https://johanhelsing.studio/posts/introducing-matchbox
    web Rust, peer-to-peer webrtc


Reconnect and save/loading:
    Server has in a worker thread a listner that listens to all network traffic
        and records state update deltas with periodic snapshots
    This should be pretty close to the logic we need for a full match replay and history rewind system
    The local storage listener can send back out messages that represent the full state of the game
    When the host loads a saved game this should be semantically the same as a new player joining an existing game
    Saving and loading a game should use exactly the same serialize/deserialize paths as the net code


"in contact" event ambiguity:
    player 2 has obj hit the ground
    event is:
        id, type, list of object ids
    the game has interpretation of what each type means
    for each obj id, the smallest authority wins
    refinement:
        the game has interpretation of how each type resolves authority
    we need incremental obj vs previous state physics checks
    possibly soft cap on velocity based on ping
        max distance for error
        network physics position error tolerance
    if we do physics for forward sim, we could ship desired veloicty

    for now: physics touching check

events:
    everyone can see that it might have happened
    can request that it happens
    

Bunch of links from reply to "When programming online games, do you take extra measures to try to prevent lag?": 
  https://www.reddit.com/r/gamedev/comments/whcvn7/comment/ij50zsy/?utm_source=reddit&utm_medium=web2x&context=3

  Here's a smorgasbord of links so you can deal with post mortems and similar rather than my half developed hobby musings (tendency towards softer material instead of technical material) :
  http://cranktrain.com/blog/autopsy-of-an-indie-mmorpg-1/
  http://cranktrain.com/blog/autopsy-of-an-indie-mmorpg-2/
  https://www.gamedeveloper.com/blogs/online-multiplayer-the-hard-way (post mortem of a smash like game, with rollback and some other neat tech)
  https://medium.com/meseta-dev
  https://web.archive.org/web/20161029212520/http://www.over00.com/index.php/archives/1119
  https://web.archive.org/web/20160624154213/http://www.over00.com/?p=1610
  https://web.archive.org/web/20070106063538/http://www.devmaster.net/articles/mmorpg-postmortem/part1.php
  https://web.archive.org/web/20070106063512/http://www.devmaster.net/articles/mmorpg-postmortem/part2.php
  https://web.archive.org/web/20070106063700/http://www.devmaster.net/articles/mmorpg-postmortem/part3.php
  https://web.archive.org/web/20070106063812/http://www.devmaster.net/articles/mmorpg-postmortem/part4.php
  https://web.archive.org/web/20070106063556/http://www.devmaster.net/articles/mmorpg-postmortem/part5.php
  https://www.kinematicsoup.com/news/2019/9/8/the-economics-of-web-based-multiplayer-games?s=gd
  https://www.youtube.com/watch?v=ECb31GwoSsM (eventually goes on to 6 rules of MMOs, and interesting experiences related to their time on MMO games dev side). https://www.youtube.com/watch?v=fuz3Bh8FQJQ (2 hours of MMO dev QA, mostly unity focused for engine specific questions). https://youtu.be/x8C63oZMrTU for unity specific multiplayer frameworks.
  https://aws.amazon.com/blogs/gametech/the-unique-architecture-behind-amazon-games-seamless-mmo-new-world/ (A technology post mortem and walkthrough of NewWorld. It's a sales pitch, managing AWS services and not being robbed blind for it requires essentially a person/team working full time on intial implementation and upkeep).
  More Tutorial-ly:
  https://www.radcade.com/how-to-add-network-multiplayer-to-your-indie-game (a brief overview of a simpler game)
  https://gafferongames.com/
  http://ithare.com/ (This one alternates between being blog like, having the beta version of their good book on multiplayer, and having some of the most in-depth tutorials)
  https://www.gabrielgambetta.com/client-server-game-architecture.html
  https://www.youtube.com/user/RainingChain/videos?sort=dd&shelf_id=1&view=0
  https://hookrace.net/blog/ddnet-evolution-architecture-technology/
  https://www.raphkoster.com/2018/11/13/mailbag-parts-of-an-mmo/
  https://youtu.be/rQcxI-ACmZg (Some slower college style lectures)
  https://ruoyusun.com/2019/03/28/game-networking-1.html
  https://github.com/MFatihMAR/Game-Networking-Resources (This is a list maintained by someone else, and it has some amazing things in it, and far more technical leaning than what I maintain).
  There are also tons of HTML 5/Node/JavaScript multiplayer tutorials that are under 2 years old (though these focus on the simpler parts in the initial steps, not the complex ones like handing off rooms between servers, having more than one server, or lag compensation) :
  https://victorzhou.com/blog/build-an-io-game-part-1/ https://victorzhou.com/blog/build-an-io-game-part-2/
  http://antriel.com/post/online-platformer-1/ http://antriel.com/post/online-platformer-2/ http://antriel.com/post/online-platformer-3/ http://antriel.com/post/online-platformer-4/ http://antriel.com/post/online-platformer-5/
  http://buildnewgames.com/real-time-multiplayer/
  https://www.dynetisgames.com/2017/03/06/how-to-make-a-multiplayer-online-game-with-phaser-socket-io-and-node-js/
  "interesting" tech overviews:
  https://technology.riotgames.com/news/fixing-internet-real-time-applications-part-i (Riot talking about building out their own backbones, and going over some of the more obnoxious technical limitations of modern internet infrastructure. In three parts)
  https://amar.io/thesis.pdf (A thesis going over a large number of the problems and solutions of P2P networking)
  “Engines" though different than what you'd think, since most of these work with multiple client side engines:
  https://colyseus.io/ (Authoritative server, that works with many engines JavaScript/Phaser/Unity/Haxe/Defold)
  https://www.modd.io/ (Designer and non-programmer focused)
  https://mirror-networking.com/ (Unity specific, looks nice but don't use unity myself).
  https://timetocode.com/nengi (Authoritative server for JavaScript stuff)
  https://blog.hathora.dev/ (Haven't had time to poke at it yet, but TypeScript. Looks focused at using AWS from the start for higher built in scalability than other options, also some nice looking tutorials. Also have a nice general blog to poke at: https://blog.hathora.dev/ )
  https://www.photonengine.com/en-us/Photon (Enterprise level for just about any engine)
  http://www.coffeemud.org/
  https://www.eclipseorigins.com/ (don’t recommend due to VB6)
  r/gamedev/comments/k2mvgn/official_baas_backend_as_a_service_discord_for/ (Discord for a bunch of other services, along with an awesome summary spreadsheet for them in that post)

P2P stuff by Yousef Amar:
  https://amar.io/thesis.pdf
  https://yousefamar.com/res/papers/PID5999227.pdf
  https://github.com/yousefamar/p2p-peer/blob/master/src/index.ts

arithmetic compression:
  https://github.com/rygorous/A/blob/master/main.cpp

Source engine lag compensation:
  https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking#Lag_compensation
  more: https://wiki.facepunch.com/gmod/Prediction

TODO: add "versioning" of objects. 
  Right now we have two types of state updates: full and dynamic. 
  A full update is only guaranteed to happen once, on object creation; 
  we track which nodes have seen each object and try to only sync each 
  object fully once. We could instead track which nodes have seen which 
  *version* of each object; we could then trigger a full sync again by 
  bumping a version number. We could use this for properties that change 
  infrequently.

  For objects with so much state that doing a full sync even infrequently is
  cost-prohibitive (player objects?), could also imagine a change log. Can use
  versions for this, too--a log entry is associated with a version and we sync
  nodes all log entries we think they might not have seen.

  For both of these, should use typescript's getters and setters to make sure
  everything gets updated in the right place.

"Fast-Paced Multiplayer":
  https://www.gabrielgambetta.com/client-server-game-architecture.html

Chat Feb 25th:
  no sync full component, just events
    no constructor components, probably no props component (just event args)
  only dynamic sync rotation position etc
  no deletes (just dead but that's by event)
  [ ] entity pool should know how to do network stuff 
    if a pool is used for network objects, the whole pool is network objects
  events don't block waiting for full sync anymore, in fact sync blocks on latest event version
  only sync w/ entities that are tagged with highest version number i know of
  events should be result of player interaction
    or maybe enemy decision like state machine change level
  are events RPCs?
    ordered reliable broadcast/multi-cast? from the host
    if we wanted peer-to-peer, could run consensus
  [ ] hard problem: compact the event log
    solve this once its a problem; for now it might not be
  right now: when you join, you get the whole event log
  rejoin:
    conceptually it's like a new player join
    as an optimization we can reuse logs
  gossip down detection:
    nodes say this player is down
    events do 
    gossip protocal is: best effort, i'm gonna recieve some info from other nodes, 
      unreliable messages sent between all nodes all to all
  seperate network entity ids?
    b/c event log is same everywhere, i can reliably get next id 
    can have dbg flags for checkin consistency
    local mapping from network id to entity id
    
Wasm-4 rollback netcode:
  https://wasm4.org/blog/release-2-4-0
  https://wasm4.org/docs/guides/multiplayer/

Serious Sam netcode:
  https://staniks.github.io/articles/serious-engine-networking-analysis