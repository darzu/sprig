
Ordered set of blogs To-Write:
    What is Sprig Land?
        What, Why, Why-Not-X
        Sprig Land aims to be the simplest way to write fun 3D games.
        "fun" does a lot of heavy lifting:
            I want everything that is at the core of good gameplay: 
                multiplayer, performant, diverse game play, local coop,
            I do not want all the bells and whistles that aren't necessary to good gameplay:
                AAA graphics, likely not highly detailed animation, bloat
        "simple" is doing a lot of heavy lifting:
            Simple means learnable, composible, well-crafted
            https://patrickjuchli.com/en/posts/learning-experience/
            I do not want to make something that "works" and then move on
            The goal of this software is not to solve immediate buisness problems,
                it is to craft a tool that will be reliable enough to belong on a well considered tool belt
                I'm an amature wood worker and I work with a lot of high speed saws
                    I would not use a power tool that asks me to allow cookies, 
                        doesn't turn off when I tell it, 
                        expands over time to fill more of my workshop
            Software should be scrutable,
                like any other good tool, you should be able to take it apart, 
                inspect the parts, and replace them as needed.
                The joining of one gear to another should be well considered and sturdy,
                    not made of ducktape and super glue.
            Interfaces are the lifeblood of all software.
        4 Goals:
            To build a fun game that people are willing to pay money for and write favorable reviews of. The flagship game.
            To ruthelessly rewrite that game into a composition of simpler, reliable parts. The sprigland libraries.
            To document the entire process so that one could reconstruct that game with a fraction of the effort. The sprigland tutorials.
            To build tooling to further speed up the building of that game by an order of magnitude. The sprigland tools.
        Repeat.
        Progress in software is only made when tasks become easier. (If you hold resource availability constant.)

        There's another secret goal here. I think this approach is the right way to advance the whole human enterprise of software
            and possibly other complex systems. I choose to start with the domain of games because they're sufficiently compelex
            and sufficiently fun to be intresnictly rewarding and I'm not getting much if any financial reward from this persuit.

        There's yet another secret goal here. This ruthless simplification is not only the best way to be productive,
            it's the best way to make something teachable. The learnability and productivity are inextricably linked.

        To create something better than what was there you have to steep yourself in the domain.

    Roadmap 2021
        It's about the journey as much as it is about the end
        Why will following or sponsoring Sprig Land be useful for you?
            Incremental progress,
            Journey of learning all parts of game making
            Early game making potential,
            Code bits
            Learning content
    Looking Back 2021
    What's in a game?
        DAG of all features of a game
    
Sprigland blog:
    the "why", the "what"
    patreon

    grid of micro blogs entries

    taxonomy of blogs:
        micro blogs / code dumps
        indepth interactive articles
        well considered positions
        "tweets"

Micro entry:
    Scene
    Code @ version or hash
    Dependencies @ version or hash
    Should be easy to open sample for oneself
    optional YouTube video link
    optional written text
    tags

    maybe: "start from X (other project) and follow Y (YouTube link)"
        creates a DAG between projects
        can use a "create lesson plan" to come up with a traversal to a particular topic

    record and replay user inputs?
        resize canvas to 128x128 or something

    future:
        upgradable
        web IDE
        easy dependencies
    
    What do the URLs look like?
        static serve from github pages
        so a project is a self-contained folder
        so to create a project, take an entry point and tree shake off everything else

    Build step:
        From entry point .ts file
            which has a standard attachToCanvas() function
        traverse imports
        collect files to be coppied
        create a readme.md
        tree shake off unused .ts ?
        copy to blog/ folder


Tree shaking:
    to minimize size of examples

    start from the "exportExample" function
    collect all the references it depends on,
    recurse over those

    does this need annotations of which code has side-effects?

    also very useful for keeping out random notes and unrelated & unreviewed snippets of code

    highlight key lines, which are all those using the key definitions

profile Website goals:
    https://halisavakis.carrd.co

Topic article format:
  - first few sentences are wikipedia style summary of what the topic is
  - then some form of interactive demo (w/ gif fallback?) to demonstrate (w/ link to code)
  - then mention it's placement amongst other articles and the dependencies of this article
  - then explain building the thing with intermediate interactables and code links if possible
  - then have a see more section

A possible timeline:
  Year 1: Build an engine
  Year 2: Game in early access
  ---- end of savings. r we funded ?? ----
  Year 3: Game 1.0
  Year 4: Blocks for all
  Year 5: Learning content
  Year 6-20: Iterate

The big bets in Sprigland:
  These aren't obviously true, otherwise they'd be done more.
  Multiplayer can be made way way easier.
  Block programming can be just as productive as text.
  Gameplay is king, u don't need fancy graphics.
    Related, u don't need a computer newer than ~10 years ago to play the best games.
  Open source games can sell. 
    (Sprigland users won't need to be open source, but we're counting on our own games still selling maybe)
  The best programming education environment is one that lets you make real shit.
  Kids won't be turned off by "grown up" looking UI/UX.
  U should have custom dsl/program analysis for any significantly complex library/platform.
  Program slicing is hugely undervalued for good learning references.
  Static typing is a must, especially for learning.
  U don't need fancy physics.

Programming is all about abstraction engineering
  Deciding when is the right time to draw an abstraction
  Abstractions change how you fundamentally think about the problem and solution space
  Abstractions leak to varrying degrees
  The best engineers know when to strategically peal back abstractions
  We all have a finitely sized scratch space / short term memory within which we can hold the disconnected pieces of unabstracted objects
    We need to assemble these into abstractions in order to make progress
    Good abstractions speed you along immensely
  Building a good abstraction requires experience with both sides of the boundry
    The more diverse the experience the better
    It's good to wait as long as possible to abstract
  Three types of program creation (seperate from fixing):
    Creating abstractions
    Assembling solutions from abstractions (turning the crank)
    Solving a puzzle (think leet code)
  It's all about trade offs:
    Strengthing and weaking pre and post conditions have opposite trade 
      offs for the caller and the callee
    Creating abstractions early might let you move faster
    Creating abstractions late will likely result in better abstractions
    changing abstractions can result in migration work for your existing solutions
  Good type systems help you change abstractions safely
  Abstractions shouldn't be sacred:
    bad abstractions are worse than no abstraction
  Ultimately the goal of software is to produce solutions to problems (usually 
    many of each).
    Solution-production efficiency (and therefore speed) is primarily a function
      how good your abstractions are
  You're often creating abstractions even when you don't think you are
    each function is a micro-abstraction
  
  Start unabstracted for as long as you can,
    then create the simplest abstractions that might possibly work
      encapsulation first
    then frankenstein glob onto your abstractions to support scenarios u need
      track everywhere the abstractions are failing you, 
      and ideas about better abstraction as they come to you
      don't try to re-abstract too often! You'll spin your wheels for little gain
        experience is the turbo fuel of abstraction, u can abstract so much faster and better with it
        our brains can try to guess the future, but it's better to just know the past
          is abstraction primarily to serve the past or the future of software?
            it's to serve tasks u did in the past that you know you'll need to do in the future
            don't try to increase the scope of what's possible with abstractions, 
              do this with core functionality instead
    once you've accumulated enough cruft and experience, try for a V2 abstraction,
      again try for the simplest thing that might possibly work
      experience will inform u of options that won't work
    don't let the abstraction take on too much life of it's own
      look at the balance of code: is it supporting core functionality (pure-ish functions),
        or is it in support of an abstraction?
      the best abstractions wrap core functionality as thinly as possible
      ideally you identify new core functionality that accumulates code lines, not the abstraction
  Core functionality / un-abstracted machinery is what code is all about
    abstractions help you orchestrate, reason about, and compose core functionality
  Inheritence should be pretty low down on your toolbelt,
    it's not in the same ballpark as composition

Abstractions and dependencies:
  The set of abstractions some dependency uses might not fit ur usecase
  Better maybe to unroll their abstractions, tree shake, and take only the code
    that is relevant to solving your problem
  Then re-abstract as needed to fit ur project's needs
  Problem with dependencies: 
    you're not only taking on all their code (transitively!), 
    you're also taking on their abstractions
  Abstractions are different from functionality

Companies are interested in shipping solutions not well engineered artifacts
  they'd be happiest constantly gluing together existing platforms into
    passable solutions and charging a mark up.
  investiment in durable libraries is rare and almost always led from the bottom up

Comments in code:
  One of the best things about coding for myself is liberal use of TODO comments. All my professional jobs in the last decade have discouraged this practice and I think they are so so wrong.
  Code is so much more than the machinery. 

Engineers need to stop refactoring before the code works. (premature generalization/abstraction)
Managers need to stop forbidding refactors once the code works.
  it's a vicious, downward spiral
  refactor needs to be about improving conditions for existing code, not planning for future
  and managers need to stop seeing code as just inputs -> outputs

Estimation vs forecasting
  Maybe instead of asking for estimates, we try to forecast forward like weather
  And like weather, we don't asign blame when it's wrong
  Forecasts are going to feel off
  IDK. might just be estimation rebranded.
  https://news.ycombinator.com/item?id=23498257
    "Instead you can look at the team’s historical data and apply statistical techniques."
    "Estimates vs plans"
    "plans are worthless but planning is everything"
  Software Estimation: Demystifying the Black Art
  https://news.ycombinator.com/item?id=27687265
  "I can give you a really really accurate estimate, but in 
    order to do so we're going to have to spend a lot of time 
    going through the request, building and verifying actual 
    requirements, designing the solution and then validating it."
  "Good and accurate estimation is not just a dev function.
    It requires buy in and input from the entire business stack."
  "We can commit to a date and we'll finish whatever we finish by then,
   or we can commit to a scope and it will take as long as it takes.
    But we won't commit to a date and a scope unless we spend the up 
    front time to first figure out every detail of what we need to build."
  https://www.commitstrip.com/en/2016/08/25/a-very-comprehensive-and-precise-spec/

Instead of being "data-driven", we should be "data-informed"
  Don't turn off your brain, data is just one set of inputs

There are no game engines that have both:
  "real 3D" -> can make an actual performant game for Steam
  "obsessive simplicity" -> can teach beginners like Scratch, Kodu, MakeCode, etc.

Programming is several skills:
  Understanding what existing code is doing
  Understanding what the layers/APIs you have to work with are
  "implementing a function"; solving a problem within an abstraction
    e.g. algorithm and data structure problem solving
  Defining boundries/abstractions

There is no universal advice (including this advice)

"speed-matters", http://jsomers.net/blog/speed-matters:
  "systems which eat items quickly are fed more items. Slow systems starve."
  lots of good insights here that touch on many of my hypothesis

"More people should write":
  http://jsomers.net/blog/more-people-should-write

Keep your own internet:
  Eric Lippert's C# blog is down: https://devblogs.microsoft.com/ericlippert/constraints-are-not-part-of-the-signature.aspx
  and I can't find it on archive.org
  Or any copies elsewhere including at https://ericlippert.com
  There's always risk of YouTube videos going down too.
  Perhapse one should have a private cached copy of your internet.
    Synced to cloud storage?
  It might be important to keep it personal and not publicly hosted so that
    it is fair use. Or just so you avoid scrutiny
  A limited set of types. All text is markdown? Media has to explicitly be opted in?
    Maybe take advantage of reader mode in browsers?
  I'd love to have a private collection of my favorite youtube channels (not hosted, just LAN)

Performance holistically considered
  A game can run at 120hz, responding to complex input, presenting complex output
  A website can take many seconds to show text after a button click, even assuming network is instant
  When we trade away performance
    general purpose chips vs asics
    general reusable patterns vs custom solutions
    often its the rational thing
  Consideration of a users' compute resources

"How to Use Math in Your Game"
  math atoms: curves, vectors, matrices, quats,
    obb, aabb, 
    storage efficeincy, which operations it's good at
  fns: easing fns, trig, linear algebra, 
  questions:
    How do I aim this cannon to hit this target? How long will the projectile fly?
    How do I project onto a screen?
  approaches:
    numerical vs closed form
  paramatric vs not
  interpreting math lingo there
    e.g. summation / integration is "just" for loop w/ + / *
  frames of reference
  implementing algorithms

What's the role of Process ?
  A trade off: adds overhead, ensures certain types of errors won't happen
  usually in the human sphere
  They're like compile or runtime time checks
    they have a cost
    they provide a benefit of safety

Logs are the best source of truth
  Make state an optimization/cache of the log
  logs are the capture as much of reality as possible
  You can do replay, rewind etc.
  undo/redo is a natural concept
  can be streamed
  can be multiplayer
  Doug says: maybe what you want is the Free Monad

The best compression is shared code
  e.g. the sticky ball example here: https://gafferongames.com/post/state_synchronization/
    probably better to store pos/rot relative to the parent ball
  don't sync all objects in world, just ensure ur running the same setup code

You need whole-program analysis
  list all the PL/SE/synthesis/verification/static-analysis research that's applicable to whole programs.

Difference in Kind vs Difference in Degree
  Under emphasized in game design
  another "+10% attack speed" is a lot less exciting than "blocking now deflects projectiles"
  the amount of content in a game is roughly equal to the amount of difference-in-kind changes
  new systems like AC bounty hunter are different-in-kind
  eg: supernova supermods, hades Daedalus hammer & Legendary & duo upgrades, vampire survivors evolutions,

Define Fwd in addition to Up
  Humans, unlike computers, do not do well with layers of translation
  don't use euler angles,
  use yaw,pitch,roll
  don't use gizmos, use an airplane
  reduce the layers of translation ur brain has to do while problem solving

Write Less to Write More:
  https://cohost.org/zeux/post/309475-write-less-to-write

The trick to working in 3D is to work in 2D as much as possible.
  Most algorithms should first be worked out in 2D and then extended to 3D.
  Cardboard/billboards work perfectly well as stand-in or shipable assets in 3D
  Many problems can be simplified to work on either a 
    2D world-map view (e.g. pathfinding, level layout)
    2D cross-section (e.g. bullet trajectory)

Code + data flow left-to-right: 🧵

  Maybe we've been writing code backwards this whole time.
  Why should data flow right-to-left while we read left-to-right?

  R2L: widget = makeWidget(param1, param2)

  Instead perhaps we should have data flow left-to-right so it matches how you read code, inputs flow into outputs:

  L2R: (param1, param2)makeWidget => widget

  right-to-left is constantly awkward when you then want to take the output and pass it through another function:

  R2L: thingy = toThingy(makeWidget(param1, param2))

  🧵👇

  While writing R2L code you are constantly appending new code on the left. 
  And while reading, you have to maintain a mental "stack" and jump forward and backward to trace the data
  Or you reason backwards from the output type. And it only gets worse with more levels of nesting.

  R2L: gizmo = asGizmo(toThingy(makeWidget(param2, parma2)))

  In an L2R alternate universe this could be:

  L2R: (((param1, param2)makeWidget)toThingy)asGizmo => gizmo


  In L2R your reading comprehension and the data flow in the same direction, and it doesn't get worse with more nesting.

  I think we actually already admit this is the better way to write code. 
  L2R patterns show up over and over again in method chaining:

  L2R: name.concat("code").toUpperCase().trim()

  and bash-style pipe'ing:

  L2R: $ cat file.txt | sort | uniq

  and point-free and tacit programming.


  But it's really awkward trying to retro-fit L2R into C-style languages, just look at the wonky syntax needed in the Javascript pipeline operator proposal: https://github.com/tc39/proposal-pipeline-operator

  I suspect total beginners to programming would have an easier time learning a left-to-right syntax.

  So anyway, maybe I'll make a left-to-right language someday.

  R2L:
  const firstRib = bezierFromPointsDirectionsInfluence({
      start,
      startDir: V3.fromYawPitch(0, PId6),
      startInfluence: i === ribCount - 1 ? 2 : 5,
      end,
      endDir: V3.fromYawPitch(PI, PId6),
      endInfluence: 5,
    });

  L2R:

  ---
  However I think I’m still on team R2L in this context for a couple of reasons:

  1. I like knowing the context for a list of params first, as that allows me to contextualize each parameter as I read it. L2R forces me to read them without context, then recontextualize them after discovering the context. This kind of forces me to “build a stack” in my mind (I know you used that as a similar argument for L2R).

  2. Defining variables first makes them all line up with each other. When I’m reading code, finding a variable is one of the things that needs to be super fast. I saw your argument about syntax highlighting, but I still think even in that context not having left alignment would be a loss.

  ---
  I hadn’t thought about #1 and yeah that makes sense. Maybe there’s just no escaping having a “conceptual stack” while parsing code b/c I feel both methods involve a bit of that.

  I think #1 is very dependent on exactly what’s going on.
  Exhibit A: ((myString)toUpperCase)trim
  Exhibit B: (123, "foo", false)myFunction

  In A I think L2R is more natural (and would normal be method chaining), in B the parameters mean nothing until you read the function name.

  For #2 I think I'll have to build some toy language to be able to answer that. Variables on the left certainly feels "natural" and important but it's hard to seperate that from all conditioning.

  For #2, maybe one way to think about it is: what's the most important thing happening in that line of code? Is it the fact that a variable is being bound/updated? Or that an expresion was executed? R2L favors the former, L2R favors the latter.

  Anyway, I think this is probably endlessly explorable, but I do find it curious that R2L is so accepted and I can't find any languages that do L2R that aren't full on posfix stack based. It seems easy to imageine a c-like language that simply flips function vs params and assignment direciton

ScriptType Language:
  Exactly TypeScript except:
    (arguments...)function 
      instead of function(arguments...)
    myExp() = let foo
      instead of let foo = myExp()

Pipe Language?
  Everything is pipelines.
  Statements always flow left to right
  expressions, arguments, data flows from left to right, each "stage" is a "pipe"

  maybe what I'm looking for is Dataflow Programming?

  Can we now have Kodu style expressions?
    When see apple Do move towards 
    =>
    Every frame:
      If see apple ->X
      MoveTo X
    =>
    Every frame:
      (ifSeeApple)MoveTo
    =>
    every frame:
      (if(See(apple)))moveToward    // conditions are R2L, expressions are L2R

  conditions are R2L, expressions are L2R ??
  