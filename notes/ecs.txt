ECS:
  https://ecsy.io/docs/#/
  https://ecsy.io/docs/#/manual/Architecture?id=queries
  https://github.com/ecsyjs/ecsy-three
  https://github.com/kaliber5/ecsy-babylon

Union -> Tuple:
  https://github.com/microsoft/TypeScript/issues/13298#issuecomment-468114901
  https://github.com/microsoft/TypeScript/issues/13298#issuecomment-468888651

Fixed length tuple:
  https://github.com/microsoft/TypeScript/issues/26223#issuecomment-410733998

Recursive conditional types:
  https://github.com/microsoft/TypeScript/pull/40002

Example from Mozilla ECSY:
  // MovableSystem
  class MovableSystem extends System {
    // This method will get called on every frame by default
    execute(delta, time) {
      // Iterate through all the entities on the query
      this.queries.moving.results.forEach(entity => {
        var velocity = entity.getComponent(Velocity);
        var position = entity.getMutableComponent(Position);
        position.x += velocity.x * delta;
        position.y += velocity.y * delta;

        if (position.x > canvasWidth + SHAPE_HALF_SIZE) position.x = - SHAPE_HALF_SIZE;
        if (position.x < - SHAPE_HALF_SIZE) position.x = canvasWidth + SHAPE_HALF_SIZE;
        if (position.y > canvasHeight + SHAPE_HALF_SIZE) position.y = - SHAPE_HALF_SIZE;
        if (position.y < - SHAPE_HALF_SIZE) position.y = canvasHeight + SHAPE_HALF_SIZE;
      });
    }
  }

  // Define a query of entities that have "Velocity" and "Position" components
  MovableSystem.queries = {
    moving: {
      components: [Velocity, Position]
    }
  }

ECS cadences
  Cadences can be disjoint (renderer vs simulation) 
  or multiples of each other (net to simulation)

callSystem

Actor model?
  https://github.com/dotnet/Orleans
  https://www.orbit.cloud/orbit/
  https://news.ycombinator.com/item?id=31192795
  https://www.microsoft.com/en-us/research/project/orleans-virtual-actors/

Relationships in an ECS:
  https://ajmmertens.medium.com/building-games-in-ecs-with-entity-relationships-657275ba2c6c

"The Truth:"
  https://ourmachinery.com/post/the-story-behind-the-truth-designing-a-data-model/

Our Machinery ECS:
  https://ourmachinery.com/post/syncing-a-data-oriented-ecs/
  https://ourmachinery.com/post/ecs-and-rendering/
  Annnd it's dead: https://www.reddit.com/r/gamedev/comments/wd4qoh/our_machinery_extensible_engine_made_in_c_just/
    They're asking people to delete their copies in 14 days :/
    They may have editted their EULA for this? https://news.ycombinator.com/item?id=32301177
    Yup, you can't trust closed source: https://twitter.com/AliceICecile/status/1553907629172342787


Bevy:
  V2, archtypes and more:
    https://bevyengine.org/news/bevy-0-5/#component-storage-the-problem
  bundles n stuff: 
    https://bevyengine.org/news/bevy-0-9/#improved-entity-component-apis
  system dependencies:
    https://bevyengine.org/news/bevy-0-5/#explicit-system-dependencies-and-system-labels
    https://bevyengine.org/news/bevy-0-9/#exclusive-system-rework
  "stageless":
    https://github.com/bevyengine/rfcs/pull/45
    https://github.com/bevyengine/rfcs/blob/main/rfcs/45-stageless.md

Phases/dependencies/scheduling design:
  init functions:
    all registered, not automatically run
    provides: list of resources and systems (just initing/reg'ing the system, not running it)
    requires: list of other resource (and systems??) they need to init
    kind of like a one-shot system, gets to request stuff, but also provides stuff and isn't called unless needed
  systems:
    registered by init functions, 
    once registered, will later be canidate scheduling (but not automatically run)
    requires: 
      resources, entity query
      ordering w/ other systems (after "physics", before "render", with "LD51 game")
    provides:
      labels (name, "physics")
  constraints:
    seperate from systems, we can declare ambient constraints like:
    "physics" before "rendering"
    must run: "physics", "ld51 game", "networking" (unordered)
    these are the "top level" things stitch together a game/scene
  solver/scheduler:
    takes all these requires/provides/constraints into account
    comes up with an ordered list of init functions to run
      only running those required to fullfill constraints
    comes up with an ordered list of systems to repeatedly run
      again only running those required to fullfill constraints

Game Programming Patterns
  https://gameprogrammingpatterns.com/contents.html

Unreal's "Mass Entity":
  https://docs.unrealengine.com/5.0/en-US/overview-of-mass-entity-in-unreal-engine/

Our Machinery's "the Truth" data model:
  https://web.archive.org/web/20220727114600/https://ourmachinery.com/post/the-story-behind-the-truth-designing-a-data-model/

BG3 / Larian's "Osiris" ECS database thing:
  https://docs.larian.game/Osiris_Overview

  example:
    INIT
      DB_MyPrefix_Fruit("Apple");		// Defines the database DB_MyPrefix_Fruit with one column of type STRING, and adds a fact consisting of the string "Apple" to it.
      DB_MyPrefix_Fruit("Pear");		// Adds another fact to the DB_MyPrefix_Fruit database.
      DB_MyPrefix_Fruit("Banana");		// And one more.
    KB
      IF					// Osiris rules always start with IF
      DB_MyPrefix_Fruit(_SomeFruit)		// This rule will fire when any database with the name "DB_MyPrefix_Fruit" gets defined.
                // The name of the fruit will be stored in (bound to) the _SomeFruit variable.
      THEN					// "THEN" indicates that the rule conditions have finished, and the rule actions follow.
      DB_MyPrefix_AtLeastOneFruit(1);		// We define a new database with the name "DB_MyPrefix_AtLeastOneFruit" and type INTEGER,
                // and add a fact with the integer value 1 to it. Since there are three rows in the
                // DB_MyPrefix_Fruit database, this action will execute three times. However, as the value
                // is always the same (1), in the end the DB_MyPrefix_AtLeastOneFruit database will
                // contain only a single fact, which consists of the value 1.

      IF
      DB_MyPrefix_Fruit("Pear")		// This rule will fire when DB_MyPrefix_Fruit("Pear") gets defined.
      AND					// Osiris rule conditions can only be combined with AND, not with OR. There is
                // another ways to implement OR-conditions though, explained below (user-defined queries).
      NOT DB_MyPrefix_Fruit("Lemon")		// This rule's actions will only execute if no DB_MyPrefix_Fruit("Lemon") entry exists.
      THEN
      DB_MyPrefix_PearNoLemon(1);

    EXIT
      NOT DB_MyPrefix_Fruit("Apple");		// Remove the "Apple" fact from the DB_MyPrefix_Fruit when the goal completes.
      NOT DB_MyPrefix_Fruit("Pear");		// Removing databases that are no longer used anywhere else after a goal completes
      NOT DB_MyPrefix_Fruit("Banana");	// reduces savegame sizes and speeds up the game.

      NOT DB_MyPrefix_AtLeastOneFruit(1);	// Even if some of these databases would not exist, removing them would not result
      NOT DB_MyPrefix_AtLeastOneFruit(1);	// in an error. Removing a non-existent database is simply ignored.