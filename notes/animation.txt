DIY mocap:
    https://www.youtube.com/watch?v=LOg_Z0t2LFs
    https://github.com/digital-standard/ThreeDPoseUnityBarracuda
    Doable with VR headset + controllers
    Glycon VR
    OpenVR Tracker
    Flipside Studio
    iPhone:
        Face Cap
    Faces:
        FaceWare (commercial)
        StrongTrack (free)
        Unreal + Live Link app
        mic + Blendshape
    PoseNet
        https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5
    Pose estimation: https://www.fritz.ai/pose-estimation/

Robolox style, standard "knight" animations:
    Run, Walk, Jump, Idle, Fall, Swim, Climb
    supports multiple animations per category, indicating (weighted) variation

Skinned vs not:
    Skinned introduces new vertices (I think)
        Mixamo introduces lots of new triangles

TO LEARN:
    https://www.youtube.com/watch?v=zp6kCe5Kmf4

Rigid animation:
    Seperate meshes, childed, placed with offsets
        Also works well for body animations like a rock golum
    Single vertex buffer, just stretched

FBX format:
    https://code.blender.org/2013/08/fbx-binary-file-format-specification/

low poly riging:
    https://www.youtube.com/watch?v=srpOeu9UUBU

Programatic animations:
    Bouncing:
        https://youtu.be/r_It_X7v-1E?t=25
    Spider legs:
        https://youtu.be/--GB9qyZJqg?t=477
    biped ?
    
Animation groups:
    Biped (human, mech)
    Quadraped (dog, cat)

How import are animations?
    Meta: effort should be spent proportial to gameplay

Skinning:
    https://canvas.dartmouth.edu/courses/16840/assignments/82767

Skeletal:
    https://en.wikipedia.org/wiki/Skeletal_animation
    http://morpheo.inrialpes.fr/~franco/3dgraphics/practical3.html

Two frame animations:
    Sword slash: wind up, strike
    Walking, running: walk left, walk right

    sort of arcade fighting style

    Effects:
        Tween vertices?
        glow trails between keyframes?
            allow user to draw trail?
            let the user chose: straight path, orbit path, ???

Animation editor:
    rigging
    inverse kinimatics
    poser
    small number of frames
    timing defined in code
    
Rigging -> model via AI:
    http://gvv.mpi-inf.mpg.de/projects/NeuralActor/

auto bug walking:
    https://twitter.com/rubna_/status/1370158075798294532

Easing functions:
    ThinMatrix recommended these over "maths"
    https://easings.net

Vaccume hose:
    https://youtu.be/PGk0rnyTa1U?t=181
    "Fabrik" algorithm
    Vaccume cord: "coding math: verlet integration"

Vertex shader for animation:
    https://www.youtube.com/watch?v=EUTE1SoOGrk


Animation Bootcamp: An Indie Approach to Procedural Animation    
    https://www.youtube.com/watch?v=LNidsMesxSE
    "Do No Harm" to the gameplay
        start with physics first
    If your consistent, players will say "intuitive" and "responsive"
        interactive means u can interrupt any animation at any time
    Better to start with mapping gamepad straight to acceleration
    Acceleration tilt does A LOT
    2 frame animation wheel
        pass pose, reach pose
        match stride to ground
    then another 2 frames for walking speed
    then synchronize blend between walking and running
    bounce: bounce more the slower, less the faster 
        "b/c gravity is always constant" -> "if you only have have as long in the stride, u fall half as far"
    interpolate between key frames
        bicubic interp is better than linear (less jerky?)
        spacial and velocity continuity
    added a crouch frame "needed some squash"
        lerp still isn't good, so used spring
    added sync for crouch walking
    2 more frames: jumping, w/ crouching spring
    1 more frame: ball, for flipping in the air
    2 more frames: rolling, tuck pose forward, tuck pose to the side
    movement: 13 key frames
        nice thing about so few: easy to add variation
            e.g. variation where he's carying a spear
    refinement:
        inverse kinimatics, move joints a little based on terrain ?
            no library, just a little trig
    1 key frame for grabbing a ledge,
        inverse kinimatics for smoothing nicely 
    refinement:
        look targets, moving head to track object
        or moving torso to face enemy
    refinement: secondary physics, 
        e.g. cape, scabard, or ears
        softness parameter for each bone,
            so arms are little wobly
    profiling: try different things until you find stuff that looks bad
        e.g. jumping straight into a wall looked pretty dumb,
            so changed that into a wall run and now it looks awesome
    rag dolls:
        originally box, eventually articulated
        tried: adding delay, clutching limbs before falling
        active ragdolls: limbs sorta try to do things before they fall
        tried: 
            pose matching, try to maintain pose (joint constraints)
            animation matching, try to keep walking e.g.
        animation tree:
            far from surface, flail
            close to surface, curl up
    all these animation tricks work in first person or other animation contexts
        spring for tweening
        recoil spring
    identify repeat animation tasks, extract them out as curves
    instead of using IK to hold a ball, just use 2 frames: very large ball, very small ball and interpolate

Ubisoft talks inverse kinimatics:
    https://www.youtube.com/watch?v=KLjTU0yKS00
    IK Rig: Procedural Pose Animation
    very programaticly dynamic characters

Vertex animation textures:
    https://www.youtube.com/watch?v=NQ5Dllbxbz4
    https://medium.com/tech-at-wildlife-studios/texture-animation-techniques-1daecb316657#

"Frame Blending with Motion Vectors"
    http://www.klemenlozar.com/frame-blending-with-motion-vectors/

Very cool low-poly insect-y procedural animation:
    https://youtu.be/kRVQYb9wzaU?t=358

Notes w/ Doug:
  Change in position, rot

  Changing positions of vertices
  changing colors

Skeletal animation:
  https://learnopengl.com/Guest-Articles/2020/Skeletal-Animation